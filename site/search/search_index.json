{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"STRUCT Documentation","text":"<p>Welcome to the comprehensive documentation for STRUCT - the Automated Project Structure Generator.</p>"},{"location":"#documentation-sections","title":"\ud83d\udcda Documentation Sections","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation Guide - How to install STRUCT</li> <li>Quick Start - Get up and running quickly</li> <li>Basic Usage - Core functionality and commands</li> </ul>"},{"location":"#configuration","title":"Configuration","text":"<ul> <li>YAML Configuration - Complete configuration reference</li> <li>Template Variables - Working with dynamic content</li> <li>File Handling - Managing files and permissions</li> </ul>"},{"location":"#advanced-features","title":"Advanced Features","text":"<ul> <li>Custom Structures - Creating your own templates</li> <li>Hooks - Pre and post-generation automation</li> <li>Mappings - Using external data mappings</li> <li>GitHub Integration - Automation with GitHub Actions</li> <li>MCP Integration - Model Context Protocol for AI-assisted workflows</li> </ul>"},{"location":"#development","title":"Development","text":"<ul> <li>Development Setup - Contributing to STRUCT</li> <li>Command-Line Completion - Auto-completion setup</li> </ul>"},{"location":"#reference","title":"Reference","text":"<ul> <li>CLI Reference - Complete command documentation</li> <li>Schema Reference - YAML validation and IDE support</li> <li>Examples - Practical examples and use cases</li> </ul>"},{"location":"#external-resources","title":"\ud83d\udd17 External Resources","text":"<ul> <li>GitHub Repository</li> <li>Articles and Tutorials</li> <li>Known Issues</li> </ul>"},{"location":"#community","title":"\ud83e\udd1d Community","text":"<ul> <li>Contributing Guidelines</li> <li>License</li> <li>Funding</li> </ul>"},{"location":"articles/","title":"Articles and Resources","text":"<p>Collection of articles, tutorials, and external resources about STRUCT.</p>"},{"location":"articles/#official-articles","title":"Official Articles","text":""},{"location":"articles/#defining-user-prompts-on-struct-harnessing-gpt-41-for-scalable-project-scaffolding","title":"Defining User Prompts on STRUCT: Harnessing GPT-4.1 for Scalable Project Scaffolding","text":"<p>Learn how to leverage GPT-4.1 to create intelligent project scaffolding with STRUCT. This article covers advanced prompting techniques and AI-driven project generation.</p> <p>Topics covered:</p> <ul> <li>AI-powered template generation</li> <li>Dynamic project structures</li> <li>GPT-4.1 integration patterns</li> <li>Scalable scaffolding strategies</li> </ul>"},{"location":"articles/#unlocking-developer-productivity-with-struct-the-ultimate-open-source-tool-for-automated-project-structures","title":"Unlocking Developer Productivity with STRUCT: The Ultimate Open-Source Tool for Automated Project Structures","text":"<p>A comprehensive overview of STRUCT's capabilities and how it can boost developer productivity through automation.</p> <p>Topics covered:</p> <ul> <li>Project structure automation</li> <li>Developer workflow optimization</li> <li>Open-source benefits</li> <li>Real-world use cases</li> </ul>"},{"location":"articles/#automating-project-structures-with-struct-and-github-actions","title":"Automating Project Structures with STRUCT and GitHub Actions","text":"<p>Discover how to integrate STRUCT with GitHub Actions for automated project setup and maintenance across repositories.</p> <p>Topics covered:</p> <ul> <li>GitHub Actions integration</li> <li>CI/CD automation</li> <li>Repository management</li> <li>Workflow triggers</li> </ul>"},{"location":"articles/#advanced-struct-tips-working-with-template-variables-and-jinja2-filters","title":"Advanced STRUCT Tips: Working with Template Variables and Jinja2 Filters","text":"<p>Deep dive into STRUCT's templating system, covering advanced variable usage and custom Jinja2 filters.</p> <p>Topics covered:</p> <ul> <li>Template variable patterns</li> <li>Custom Jinja2 filters</li> <li>Dynamic content generation</li> <li>Advanced templating techniques</li> </ul>"},{"location":"articles/#community-articles","title":"Community Articles","text":"<p>Community contributions welcome! Submit a PR to add your STRUCT-related articles here.</p>"},{"location":"articles/#tutorials","title":"Tutorials","text":""},{"location":"articles/#video-tutorials","title":"Video Tutorials","text":"<p>Coming soon - video tutorials will be added as they become available.</p>"},{"location":"articles/#interactive-tutorials","title":"Interactive Tutorials","text":"<ul> <li>Getting Started Guide: Follow along with practical examples in the Quick Start documentation</li> <li>Template Variables: Learn by example in the Template Variables guide</li> <li>Advanced Configuration: Explore complex scenarios in YAML Configuration</li> </ul>"},{"location":"articles/#use-cases","title":"Use Cases","text":""},{"location":"articles/#devops-and-infrastructure","title":"DevOps and Infrastructure","text":"<ul> <li>Terraform Module Generation: Standardize infrastructure code</li> <li>Kubernetes Manifests: Generate consistent deployment configurations</li> <li>CI/CD Pipeline Templates: Automate pipeline creation</li> <li>Configuration Management: Maintain consistent environments</li> </ul>"},{"location":"articles/#application-development","title":"Application Development","text":"<ul> <li>Microservice Scaffolding: Generate service boilerplate</li> <li>API Project Templates: Standardize REST API structures</li> <li>Frontend Framework Setup: Bootstrap React, Vue, or Angular projects</li> <li>Database Schema Generation: Create consistent database structures</li> </ul>"},{"location":"articles/#documentation-and-compliance","title":"Documentation and Compliance","text":"<ul> <li>Project Documentation: Generate README templates and docs</li> <li>Compliance Templates: Ensure regulatory requirements</li> <li>Security Configurations: Apply security best practices</li> <li>Audit Trail Generation: Create trackable project structures</li> </ul>"},{"location":"articles/#presentations-and-talks","title":"Presentations and Talks","text":"<p>Conference presentations and community talks about STRUCT will be listed here.</p>"},{"location":"articles/#research-and-academic-papers","title":"Research and Academic Papers","text":"<p>Academic research involving STRUCT or related concepts will be referenced here.</p>"},{"location":"articles/#external-tools-and-integrations","title":"External Tools and Integrations","text":""},{"location":"articles/#ide-extensions","title":"IDE Extensions","text":"<ul> <li>VS Code YAML Extension: Enhanced editing with schema validation</li> <li>IntelliJ YAML Support: Schema-aware editing and completion</li> </ul>"},{"location":"articles/#cicd-integrations","title":"CI/CD Integrations","text":"<ul> <li>GitHub Actions: Pre-built actions for STRUCT workflows</li> <li>GitLab CI: Integration examples and templates</li> <li>Jenkins: Pipeline integration patterns</li> </ul>"},{"location":"articles/#complementary-tools","title":"Complementary Tools","text":"<ul> <li>Cookiecutter: Alternative project templating tool</li> <li>Yeoman: JavaScript-focused scaffolding</li> <li>Copilot: AI-powered code generation</li> </ul>"},{"location":"articles/#community-resources","title":"Community Resources","text":""},{"location":"articles/#forums-and-discussion","title":"Forums and Discussion","text":"<ul> <li>GitHub Discussions: Official community forum</li> <li>Stack Overflow: Questions tagged with <code>struct-tool</code></li> </ul>"},{"location":"articles/#code-examples","title":"Code Examples","text":"<ul> <li>GitHub Examples Repository: Community-contributed examples</li> <li>Gist Collections: Snippets and configurations</li> <li>Docker Hub: Pre-built images and examples</li> </ul>"},{"location":"articles/#learning-paths","title":"Learning Paths","text":""},{"location":"articles/#beginner-path","title":"Beginner Path","text":"<ol> <li>Start with Installation</li> <li>Follow the Quick Start guide</li> <li>Explore Basic Usage</li> <li>Learn YAML Configuration basics</li> </ol>"},{"location":"articles/#intermediate-path","title":"Intermediate Path","text":"<ol> <li>Master Template Variables</li> <li>Understand File Handling strategies</li> <li>Explore Custom Structures</li> <li>Learn Mappings for data separation</li> </ol>"},{"location":"articles/#advanced-path","title":"Advanced Path","text":"<ol> <li>Implement Hooks for automation</li> <li>Set up GitHub Integration</li> <li>Contribute to Development</li> <li>Create complex multi-environment setups</li> </ol>"},{"location":"articles/#contributing-content","title":"Contributing Content","text":"<p>We welcome contributions to this resource collection! Here's how you can help:</p>"},{"location":"articles/#adding-articles","title":"Adding Articles","text":"<ol> <li>Fork the repository</li> <li>Add your article to the appropriate section</li> <li>Include a brief description and key topics</li> <li>Submit a pull request</li> </ol>"},{"location":"articles/#suggesting-resources","title":"Suggesting Resources","text":"<ul> <li>Open an issue with the \"resource suggestion\" label</li> <li>Include the resource link and description</li> <li>Explain why it would be valuable to the community</li> </ul>"},{"location":"articles/#writing-tutorials","title":"Writing Tutorials","text":"<ul> <li>Create step-by-step guides with practical examples</li> <li>Include code snippets and expected outputs</li> <li>Test instructions thoroughly before submitting</li> </ul>"},{"location":"articles/#newsletter-and-updates","title":"Newsletter and Updates","text":"<p>Stay updated with the latest STRUCT developments:</p> <ul> <li>GitHub Releases: Watch the repository for release notifications</li> <li>Community Updates: Follow project maintainers on social media</li> <li>Blog Subscriptions: Subscribe to the official blog for updates</li> </ul> <p>This page is regularly updated with new content. Bookmark it for future reference!</p>"},{"location":"cli-reference/","title":"CLI Reference","text":"<p>This document provides a reference for the <code>struct</code> command-line interface (CLI).</p>"},{"location":"cli-reference/#overview","title":"Overview","text":"<p>The <code>struct</code> CLI allows you to generate project structures from YAML configuration files. It supports both built-in structure definitions and custom structures.</p> <p>Basic Usage:</p> <pre><code>struct {info,validate,generate,list,generate-schema} ...\n</code></pre>"},{"location":"cli-reference/#global-options","title":"Global Options","text":"<p>These options are available for all commands:</p> <ul> <li><code>-h, --help</code>: Show the help message and exit.</li> <li><code>-l LOG, --log LOG</code>: Set the logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL).</li> <li><code>-c CONFIG_FILE, --config-file CONFIG_FILE</code>: Path to a configuration file.</li> <li><code>-i LOG_FILE, --log-file LOG_FILE</code>: Path to a log file.</li> </ul>"},{"location":"cli-reference/#commands","title":"Commands","text":""},{"location":"cli-reference/#info","title":"<code>info</code>","text":"<p>Show information about a structure definition.</p> <p>Usage:</p> <pre><code>struct info [-h] [-l LOG] [-c CONFIG_FILE] [-i LOG_FILE] [-s STRUCTURES_PATH] structure_definition\n</code></pre> <p>Arguments:</p> <ul> <li><code>structure_definition</code>: Name of the structure definition.</li> <li><code>-s STRUCTURES_PATH, --structures-path STRUCTURES_PATH</code>: Path to structure definitions.</li> </ul>"},{"location":"cli-reference/#validate","title":"<code>validate</code>","text":"<p>Validate the YAML configuration file.</p> <p>Usage:</p> <pre><code>struct validate [-h] [-l LOG] [-c CONFIG_FILE] [-i LOG_FILE] yaml_file\n</code></pre> <p>Arguments:</p> <ul> <li><code>yaml_file</code>: Path to the YAML configuration file.</li> </ul>"},{"location":"cli-reference/#generate","title":"<code>generate</code>","text":"<p>Generate the project structure.</p> <p>Usage:</p> <pre><code>struct generate [-h] [-l LOG] [-c CONFIG_FILE] [-i LOG_FILE] [-s STRUCTURES_PATH] [-n INPUT_STORE] [-d] [-v VARS] [-b BACKUP] [-f {overwrite,skip,append,rename,backup}] [-p GLOBAL_SYSTEM_PROMPT] [--non-interactive] [--mappings-file MAPPINGS_FILE] [-o {console,file}] structure_definition base_path\n</code></pre> <p>Arguments:</p> <ul> <li><code>structure_definition</code>: Path to the YAML configuration file.</li> <li><code>base_path</code>: Base path where the structure will be created.</li> <li><code>-s STRUCTURES_PATH, --structures-path STRUCTURES_PATH</code>: Path to structure definitions.</li> <li><code>-n INPUT_STORE, --input-store INPUT_STORE</code>: Path to the input store.</li> <li><code>-d, --dry-run</code>: Perform a dry run without creating any files or directories.</li> <li><code>-v VARS, --vars VARS</code>: Template variables in the format KEY1=value1,KEY2=value2.</li> <li><code>-b BACKUP, --backup BACKUP</code>: Path to the backup folder.</li> <li><code>-f {overwrite,skip,append,rename,backup}, --file-strategy {overwrite,skip,append,rename,backup}</code>: Strategy for handling existing files.</li> <li><code>-p GLOBAL_SYSTEM_PROMPT, --global-system-prompt GLOBAL_SYSTEM_PROMPT</code>: Global system prompt for OpenAI.</li> <li><code>--non-interactive</code>: Run the command in non-interactive mode.</li> <li><code>--mappings-file MAPPINGS_FILE</code>: Path to a YAML file containing mappings to be used in templates (can be specified multiple times).</li> <li><code>-o {console,file}, --output {console,file}</code>: Output mode.</li> </ul>"},{"location":"cli-reference/#list","title":"<code>list</code>","text":"<p>List available structures.</p> <p>Usage:</p> <pre><code>struct list [-h] [-l LOG] [-c CONFIG_FILE] [-i LOG_FILE] [-s STRUCTURES_PATH]\n</code></pre> <p>Arguments:</p> <ul> <li><code>-s STRUCTURES_PATH, --structures-path STRUCTURES_PATH</code>: Path to structure definitions.</li> </ul>"},{"location":"cli-reference/#generate-schema","title":"<code>generate-schema</code>","text":"<p>Generate JSON schema for available structures.</p> <p>Usage:</p> <pre><code>struct generate-schema [-h] [-l LOG] [-c CONFIG_FILE] [-i LOG_FILE] [-s STRUCTURES_PATH] [-o OUTPUT]\n</code></pre> <p>Arguments:</p> <ul> <li><code>-s STRUCTURES_PATH, --structures-path STRUCTURES_PATH</code>: Path to structure definitions.</li> <li><code>-o OUTPUT, --output OUTPUT</code>: Output file path for the schema (default: stdout).</li> </ul>"},{"location":"cli-reference/#examples","title":"Examples","text":""},{"location":"cli-reference/#basic-structure-generation","title":"Basic Structure Generation","text":"<p>Generate a structure using a built-in definition:</p> <pre><code>struct generate python-basic ./my-project\n</code></pre> <p>Generate from a custom YAML file:</p> <pre><code>struct generate file://my-structure.yaml ./output-dir\n</code></pre>"},{"location":"cli-reference/#using-custom-structures","title":"Using Custom Structures","text":"<p>Generate with custom structure path:</p> <pre><code>struct generate -s ~/custom-structures python-api ./my-api\n</code></pre>"},{"location":"cli-reference/#template-variables","title":"Template Variables","text":"<p>Pass template variables to the structure:</p> <pre><code>struct generate -v \"project_name=MyApp,author=John Doe\" file://structure.yaml ./output\n</code></pre>"},{"location":"cli-reference/#dry-run","title":"Dry Run","text":"<p>Test structure generation without creating files:</p> <pre><code>struct generate -d file://structure.yaml ./output\n</code></pre>"},{"location":"cli-reference/#file-strategies","title":"File Strategies","text":"<p>Handle existing files with different strategies:</p> <pre><code># Skip existing files\nstruct generate -f skip file://structure.yaml ./output\n\n# Backup existing files\nstruct generate -f backup -b ./backup file://structure.yaml ./output\n</code></pre>"},{"location":"cli-reference/#console-output","title":"Console Output","text":"<p>Output to console instead of creating files:</p> <pre><code>struct generate -o console file://structure.yaml ./output\n</code></pre>"},{"location":"cli-reference/#validation","title":"Validation","text":"<p>Validate a YAML configuration before generation:</p> <pre><code>struct validate my-structure.yaml\n</code></pre>"},{"location":"cli-reference/#list-available-structures","title":"List Available Structures","text":"<p>List all built-in structures:</p> <pre><code>struct list\n</code></pre> <p>List structures from custom path:</p> <pre><code>struct list -s ~/custom-structures\n</code></pre>"},{"location":"cli-reference/#get-structure-information","title":"Get Structure Information","text":"<p>Get detailed information about a structure:</p> <pre><code>struct info python-basic\n</code></pre>"},{"location":"cli-reference/#generate-schema_1","title":"Generate Schema","text":"<p>Generate JSON schema and save to file:</p> <pre><code>struct generate-schema -o schema.json\n</code></pre>"},{"location":"completion/","title":"Command-Line Auto-Completion","text":"<p>STRUCT provides intelligent auto-completion for commands, options, and structure names using argcomplete. This makes discovering and using available structures much faster and more user-friendly.</p> <p>New Feature: Structure Name Completion</p> <p>STRUCT now automatically completes structure names when using <code>struct generate</code>, showing all 47+ available structures from both built-in and custom paths!</p>"},{"location":"completion/#quick-setup","title":"Quick Setup","text":"<p>For most users, this simple setup will enable full completion:</p> <pre><code># Install (if not already installed)\npip install argcomplete\n\n# Enable completion for current session\neval \"$(register-python-argcomplete struct)\"\n\n# Make permanent - add to your ~/.zshrc or ~/.bashrc\necho 'eval \"$(register-python-argcomplete struct)\"' &gt;&gt; ~/.zshrc\n</code></pre>"},{"location":"completion/#detailed-installation","title":"Detailed Installation","text":""},{"location":"completion/#1-install-argcomplete","title":"1. Install argcomplete","text":"<pre><code>pip install argcomplete\n</code></pre>"},{"location":"completion/#2-enable-global-completion-optional","title":"2. Enable Global Completion (Optional)","text":"<p>This step is optional but can be done once per system:</p> <pre><code>activate-global-python-argcomplete\n</code></pre> <p>This command sets up global completion for all Python scripts that use argcomplete.</p>"},{"location":"completion/#3-register-the-script","title":"3. Register the Script","text":"<p>Add the following line to your shell's configuration file:</p> <p>For Bash (<code>.bashrc</code> or <code>.bash_profile</code>):</p> <pre><code>eval \"$(register-python-argcomplete struct)\"\n</code></pre> <p>For Zsh (<code>.zshrc</code>):</p> <pre><code>eval \"$(register-python-argcomplete struct)\"\n</code></pre> <p>For Fish (<code>.config/fish/config.fish</code>):</p> <pre><code>register-python-argcomplete --shell fish struct | source\n</code></pre>"},{"location":"completion/#4-reload-your-shell","title":"4. Reload Your Shell","text":"<pre><code># For Bash\nsource ~/.bashrc\n\n# For Zsh\nsource ~/.zshrc\n\n# For Fish\nsource ~/.config/fish/config.fish\n</code></pre>"},{"location":"completion/#usage","title":"Usage","text":"<p>After completing the setup, you can use auto-completion by typing part of a command and pressing <code>Tab</code>:</p>"},{"location":"completion/#command-completion","title":"Command Completion","text":"<pre><code>struct &lt;Tab&gt;\n# Shows: generate, generate-schema, validate, info, list\n</code></pre>"},{"location":"completion/#structure-name-completion","title":"Structure Name Completion \u2728","text":"<pre><code># Complete structure names - shows all available structures!\nstruct generate &lt;Tab&gt;\n# Shows: ansible-playbook, docker-files, github/workflows/codeql, project/nodejs, etc.\n\n# Partial completion works too\nstruct generate git&lt;Tab&gt;\n# Shows: git-hooks, github/workflows/codeql, github/templates, etc.\n\n# Works with nested structures\nstruct generate github/&lt;Tab&gt;\n# Shows: github/workflows/codeql, github/templates, github/prompts/generic, etc.\n</code></pre>"},{"location":"completion/#custom-structure-paths","title":"Custom Structure Paths","text":"<pre><code># Completion works with custom structure paths\nstruct generate --structures-path /custom/path &lt;Tab&gt;\n# Shows structures from both custom path and built-in structures\n</code></pre>"},{"location":"completion/#option-completion","title":"Option Completion","text":"<pre><code>struct generate --&lt;Tab&gt;\n# Shows: --log, --dry-run, --backup, --file-strategy, --structures-path, etc.\n\nstruct generate --log &lt;Tab&gt;\n# Shows: DEBUG, INFO, WARNING, ERROR, CRITICAL\n</code></pre>"},{"location":"completion/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"completion/#per-project-completion","title":"Per-Project Completion","text":"<p>If you only want completion for specific projects, you can add completion to your project's virtual environment activation script:</p> <pre><code># In your .venv/bin/activate file, add:\neval \"$(register-python-argcomplete struct)\"\n</code></pre>"},{"location":"completion/#custom-completion","title":"Custom Completion","text":"<p>You can create custom completion functions for specific use cases:</p> <pre><code># Custom completion for structure names\n_struct_structures() {\n    local structures=$(struct list --names-only 2&gt;/dev/null)\n    COMPREPLY=($(compgen -W \"$structures\" -- \"${COMP_WORDS[COMP_CWORD]}\"))\n}\n\n# Register custom completion\ncomplete -F _struct_structures struct-generate\n</code></pre>"},{"location":"completion/#troubleshooting","title":"Troubleshooting","text":""},{"location":"completion/#completion-not-working","title":"Completion Not Working","text":"<ol> <li>Check argcomplete installation:</li> </ol> <pre><code>python -c \"import argcomplete; print('OK')\"\n</code></pre> <ol> <li>Verify global activation:</li> </ol> <pre><code>activate-global-python-argcomplete --user\n</code></pre> <ol> <li> <p>Check shell configuration:    Make sure the eval statement is in the correct shell configuration file.</p> </li> <li> <p>Restart your shell:    Sometimes you need to completely restart your terminal.</p> </li> </ol>"},{"location":"completion/#slow-completion","title":"Slow Completion","text":"<p>If completion is slow, you can enable caching:</p> <pre><code>export ARGCOMPLETE_USE_TEMPFILES=1\n</code></pre> <p>Add this to your shell configuration file for persistent caching.</p>"},{"location":"completion/#debug-completion","title":"Debug Completion","text":"<p>Enable debug mode to troubleshoot completion issues:</p> <pre><code>export _ARGCOMPLETE_DEBUG=1\nstruct &lt;Tab&gt;\n</code></pre>"},{"location":"completion/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"completion/#macos","title":"macOS","text":"<p>On macOS, you might need to install bash-completion first:</p> <pre><code># Using Homebrew\nbrew install bash-completion\n\n# Then add to ~/.bash_profile:\n[[ -r \"/usr/local/etc/profile.d/bash_completion.sh\" ]] &amp;&amp; . \"/usr/local/etc/profile.d/bash_completion.sh\"\n</code></pre>"},{"location":"completion/#windows","title":"Windows","text":"<p>For Windows users using Git Bash or WSL, follow the same steps as Linux. For PowerShell, argcomplete support is limited.</p>"},{"location":"completion/#docker","title":"Docker","text":"<p>When running STRUCT in Docker, completion won't work directly. However, you can create a wrapper script:</p> <pre><code>#!/bin/bash\n# struct-wrapper.sh\ndocker run --rm -v $(pwd):/workdir ghcr.io/httpdss/struct:main \"$@\"\n</code></pre> <p>Then set up completion for the wrapper:</p> <pre><code>eval \"$(register-python-argcomplete struct-wrapper.sh)\"\n</code></pre>"},{"location":"completion/#benefits-of-auto-completion","title":"Benefits of Auto-Completion","text":"<ul> <li>Faster typing: Quickly complete command names and options</li> <li>Discoverability: See available commands and options</li> <li>Accuracy: Reduce typos and errors</li> <li>Productivity: Spend less time looking up command syntax</li> </ul>"},{"location":"completion/#supported-completions","title":"Supported Completions","text":"<p>STRUCT provides intelligent completion for:</p> <ul> <li>Commands: <code>generate</code>, <code>validate</code>, <code>list</code>, <code>info</code>, <code>generate-schema</code></li> <li>Options: <code>--log</code>, <code>--dry-run</code>, <code>--backup</code>, <code>--file-strategy</code>, <code>--structures-path</code>, etc.</li> <li>Structure names: All 47+ available built-in and custom structures</li> <li>Built-in structures: <code>ansible-playbook</code>, <code>docker-files</code>, <code>helm-chart</code>, etc.</li> <li>Nested structures: <code>github/workflows/codeql</code>, <code>project/nodejs</code>, <code>terraform/apps/generic</code>, etc.</li> <li>Custom structures: From <code>--structures-path</code> directories</li> <li>File paths: Local files and directories</li> <li>Enum values: Log levels (<code>DEBUG</code>, <code>INFO</code>, etc.), file strategies (<code>overwrite</code>, <code>skip</code>, etc.)</li> </ul>"},{"location":"completion/#how-structure-completion-works","title":"How Structure Completion Works","text":"<p>The structure name completion feature:</p> <ol> <li>Dynamically discovers all available structure files (<code>.yaml</code> files)</li> <li>Scans multiple locations:</li> <li>Built-in structures in <code>struct_module/contribs/</code></li> <li>Custom structures from <code>--structures-path</code> if specified</li> <li>Returns clean names without <code>.yaml</code> extensions</li> <li>Supports nested directories like <code>github/workflows/codeql</code></li> <li>Updates automatically when new structures are added</li> </ol>"},{"location":"completion/#example-session","title":"Example Session","text":"<pre><code># Command completion\n$ struct &lt;Tab&gt;\ngenerate        generate-schema info           list           validate\n\n# Structure name completion (NEW!)\n$ struct generate &lt;Tab&gt;\nansible-playbook     configs/codeowners    github/workflows/codeql  project/nodejs\nchef-cookbook        docker-files          helm-chart               terraform/apps/generic\nci-cd-pipelines      git-hooks            kubernetes-manifests      vagrant-files\n\n# Partial completion\n$ struct generate proj&lt;Tab&gt;\nproject/custom-structures  project/go      project/nodejs  project/ruby\nproject/generic           project/java    project/python  project/rust\n\n# Nested structure completion\n$ struct generate github/&lt;Tab&gt;\ngithub/chatmodes/plan       github/prompts/react-form    github/workflows/codeql\ngithub/instructions/generic github/prompts/security-api  github/workflows/labeler\ngithub/prompts/generic      github/workflows/pre-commit  github/workflows/stale\n\n# Option completion\n$ struct generate --&lt;Tab&gt;\n--backup        --dry-run       --file-strategy --log\n--log-file      --mappings-file --structures-path --vars\n\n# Enum value completion\n$ struct generate --log &lt;Tab&gt;\nDEBUG    ERROR    INFO     WARNING  CRITICAL\n\n$ struct generate --file-strategy &lt;Tab&gt;\nappend    backup    overwrite    rename    skip\n</code></pre> <p>This makes working with STRUCT much more efficient and user-friendly!</p>"},{"location":"configuration/","title":"YAML Configuration","text":""},{"location":"configuration/#configuration-properties","title":"Configuration Properties","text":"<p>When defining your project structure in the YAML configuration file, you can use various properties to control the behavior of the script. Here are the available properties:</p> <ul> <li>skip: If set to <code>true</code>, the file or folder will be skipped and not created.</li> <li>skip_if_exists: If set to <code>true</code>, the file or folder will be skipped if it already exists.</li> <li>permissions: Set custom file permissions using a string representation of the octal value (e.g., <code>'0777'</code>).</li> <li>content: Define the content of the file directly in the YAML configuration.</li> <li>file: Specify a local or remote file to include. Supported protocols include <code>file://</code>, <code>http://</code>, <code>https://</code>, <code>github://</code>, <code>githubhttps://</code>, <code>githubssh://</code>, <code>s3://</code>, and <code>gs://</code>.</li> </ul> <p>Note: For local <code>.yaml</code> files, the <code>file://</code> protocol is automatically added if not specified.</p> <p>Example:</p> <pre><code>files:\n  - README.md:\n      skip: true\n      content: |\n        # {{@ project_name @}}\n        This is a template repository.\n  - script.sh:\n      skip_if_exists: true\n      permissions: '0777'\n      content: |\n        #!/bin/bash\n        echo \"Hello, {{@ author_name @}}!\"\n  - LICENSE:\n      file: https://raw.githubusercontent.com/nishanths/license/master/LICENSE\n  - remote_file.txt:\n      file: file:///path/to/local/file.txt\n  - github_file.py:\n      file: github://owner/repo/branch/path/to/file.py\n  - github_https_file.py:\n      file: githubhttps://owner/repo/branch/path/to/file.py\n  - github_ssh_file.py:\n      file: githubssh://owner/repo/branch/path/to/file.py\n  - s3_file.txt:\n      file: s3://bucket_name/key\n  - gcs_file.txt:\n      file: gs://bucket_name/key\n  - src/main.py:\n      content: |\n        print(\"Hello, World!\")\nfolders:\n  - .devops/modules/mod1:\n      struct: terraform/module\n  - .devops/modules/mod2:\n      struct: terraform/module\n      with:\n        module_name: mymod2\n  - ./:\n      struct:\n        - docker-files\n        - project/go\nvariables:\n  - project_name:\n      description: \"The name of the project\"\n      default: \"MyProject\"\n      type: string\n  - author_name:\n      description: \"The name of the author\"\n      type: string\n      default: \"John Doe\"\n</code></pre> <p>These properties allow you to customize the behavior and content of the files and folders generated by the script, providing flexibility and control over your project structure.</p>"},{"location":"configuration/#template-variables","title":"Template Variables","text":"<p>You can use template variables in your configuration file by enclosing them in <code>{{@</code> and <code>@}}</code>. For example, <code>{{@ project_name @}}</code> will be replaced with the value of the <code>project_name</code> variable at runtime. If this are not set when running the script, it will prompt you to enter the value interactively.</p> <p>If you need to define blocks you can use starting block notation <code>{%@</code> and end block notation <code>%@}</code>.</p> <p>To define comments you can use the comment start notation <code>{#@</code> and end comment notation <code>@#}</code>.</p>"},{"location":"configuration/#default-template-variables","title":"Default template variables","text":"<ul> <li><code>file_name</code>: The name of the file being processed.</li> <li><code>file_directory</code>: The name of the directory of file that is being processed.</li> </ul>"},{"location":"configuration/#interactive-template-variables","title":"Interactive template variables","text":"<p>If you don't provide a default value for a variable, the script will prompt you to enter the value interactively.</p> <p>The struct defined should define the variable on a specific section of the YAML file. For example:</p> <pre><code>variables:\n  - author_name:\n      description: \"The name of the author\"\n      type: string\n      default: \"John Doe\"\n</code></pre> <p>as you can see, the <code>author_name</code> variable is defined on the <code>variables</code> section of the YAML file. it includes a <code>description</code>, <code>type</code> and <code>default</code> value which is used if the user doesn't provide a value interactively.</p>"},{"location":"configuration/#custom-jinja2-filters","title":"Custom Jinja2 filters","text":""},{"location":"configuration/#latest_release","title":"<code>latest_release</code>","text":"<p>This filter fetches the latest release version of a GitHub repository. It takes the repository name as an argument.</p> <pre><code>files:\n  - README.md:\n      content: |\n        # MyProject\n        Latest release: {{@ \"httpdss/struct\" | latest_release @}}\n</code></pre> <p>This uses PyGithub to fetch the latest release of the repository so setting the <code>GITHUB_TOKEN</code> environment variable will give you access to private repositories.</p> <p>If there is an error in the process, the filter will return <code>LATEST_RELEASE_ERROR</code>.</p> <p>NOTE: you can use this filter to get the latest release for a terraform provider. For example, to get the latest release of the <code>aws</code> provider, you can use <code>{{@ \"hashicorp/terraform-provider-aws\" | latest_release @}}</code> or datadog provider <code>{{@ \"DataDog/terraform-provider-datadog\" | latest_release @}}</code>.</p>"},{"location":"configuration/#slugify","title":"<code>slugify</code>","text":"<p>This filter converts a string into a slug. It takes an optional argument to specify the separator character (default is <code>-</code>).</p> <pre><code>files:\n  - README.md:\n      content: |\n        # {{@ project_name @}}\n        This is a template repository.\n        slugify project_name: {{@ project_name | slugify @}}\n</code></pre>"},{"location":"configuration/#default_branch","title":"<code>default_branch</code>","text":"<p>This filter fetches the default branch name of a GitHub repository. It takes the repository name as an argument.</p> <pre><code>files:\n  - README.md:\n      content: |\n        # MyProject\n        Default branch: {{@ \"httpdss/struct\" | default_branch @}}\n</code></pre>"},{"location":"contributing/","title":"Contributing to STRUCT","text":"<p>Thank you for your interest in contributing to STRUCT! We welcome contributions from the community and are pleased to have you join us.</p>"},{"location":"contributing/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally</li> <li>Create a feature branch from <code>main</code></li> <li>Make your changes and commit them</li> <li>Push to your fork and submit a pull request</li> </ol>"},{"location":"contributing/#development-setup","title":"\ud83d\udccb Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Git</li> <li>A text editor or IDE</li> </ul>"},{"location":"contributing/#local-development","title":"Local Development","text":"<p>Clone the repository:</p> <pre><code>git clone https://github.com/httpdss/struct.git\ncd struct\n</code></pre> <p>Create a virtual environment:</p> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre> <p>Install in development mode:</p> <pre><code>pip install -e .\npip install -r requirements.dev.txt\n</code></pre> <p>Run tests to ensure everything works:</p> <pre><code>pytest\n</code></pre>"},{"location":"contributing/#making-changes","title":"\ud83d\udd27 Making Changes","text":""},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 guidelines</li> <li>Use 2 spaces for indentation in YAML files</li> <li>Use 4 spaces for indentation in Python files</li> <li>Write clear, descriptive commit messages</li> <li>Add docstrings to new functions and classes</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<ul> <li>Write tests for new functionality</li> <li>Ensure all existing tests pass</li> <li>Run the test suite: <code>pytest</code></li> <li>Check test coverage: <code>pytest --cov=struct_module</code></li> </ul>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ol> <li>Create descriptive PR titles that summarize the change</li> <li>Fill out the PR template completely</li> <li>Link to related issues when applicable</li> <li>Keep PRs focused - one feature/fix per PR</li> <li>Update documentation if your changes affect user-facing functionality</li> </ol>"},{"location":"contributing/#documentation","title":"\ud83d\udcdd Documentation","text":"<p>We use Markdown for documentation. When contributing:</p> <ul> <li>Update relevant documentation files</li> <li>Add examples for new features</li> <li>Keep language clear and concise</li> <li>Follow the existing documentation structure</li> </ul>"},{"location":"contributing/#documentation-structure","title":"Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md              # Main documentation index\n\u251c\u2500\u2500 installation.md       # Installation instructions\n\u251c\u2500\u2500 quickstart.md         # Quick start guide\n\u251c\u2500\u2500 configuration.md      # YAML configuration reference\n\u251c\u2500\u2500 template-variables.md # Template variable documentation\n\u251c\u2500\u2500 file-handling.md      # File handling features\n\u251c\u2500\u2500 custom-structures.md  # Creating custom structures\n\u251c\u2500\u2500 hooks.md              # Pre/post hooks\n\u251c\u2500\u2500 mappings.md           # External data mappings\n\u251c\u2500\u2500 github-integration.md # GitHub Actions integration\n\u251c\u2500\u2500 development.md        # Development setup\n\u251c\u2500\u2500 completion.md         # CLI completion setup\n\u251c\u2500\u2500 cli-reference.md      # Complete CLI reference\n\u251c\u2500\u2500 schema.md             # YAML schema reference\n\u251c\u2500\u2500 examples/             # Example configurations\n\u251c\u2500\u2500 articles.md           # External articles and tutorials\n\u251c\u2500\u2500 known-issues.md       # Known limitations\n\u251c\u2500\u2500 contributing.md       # This file\n\u2514\u2500\u2500 funding.md            # Funding information\n</code></pre>"},{"location":"contributing/#contributing-new-structures","title":"\ud83c\udfd7\ufe0f Contributing New Structures","text":"<p>STRUCT includes a collection of contrib structures in <code>struct_module/contribs/</code>. To add a new structure:</p> <ol> <li>Create a new YAML file in the appropriate subdirectory</li> <li>Follow naming conventions: use lowercase with hyphens</li> <li>Test your structure with various scenarios</li> <li>Add documentation explaining what the structure does</li> <li>Include examples in your PR description</li> </ol>"},{"location":"contributing/#structure-guidelines","title":"Structure Guidelines","text":"<ul> <li>Use descriptive file and folder names</li> <li>Include appropriate comments in YAML</li> <li>Follow the established patterns in existing structures</li> <li>Test with different variable combinations</li> <li>Ensure compatibility across platforms</li> </ul>"},{"location":"contributing/#reporting-issues","title":"\ud83d\udc1b Reporting Issues","text":""},{"location":"contributing/#bug-reports","title":"Bug Reports","text":"<p>When reporting bugs, please include:</p> <ul> <li>OS and Python version</li> <li>STRUCT version (<code>struct --version</code>)</li> <li>Complete error message or traceback</li> <li>Steps to reproduce the issue</li> <li>Expected vs actual behavior</li> <li>Sample configuration that reproduces the issue</li> </ul>"},{"location":"contributing/#feature-requests","title":"Feature Requests","text":"<p>For feature requests:</p> <ul> <li>Describe the use case clearly</li> <li>Explain the benefit to other users</li> <li>Provide examples of how it would work</li> <li>Consider implementation complexity</li> </ul>"},{"location":"contributing/#project-structure","title":"\ud83d\udcca Project Structure","text":"<pre><code>struct/\n\u251c\u2500\u2500 struct_module/           # Main Python package\n\u2502   \u251c\u2500\u2500 commands/           # CLI command implementations\n\u2502   \u251c\u2500\u2500 contribs/          # Contributed structure templates\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py            # CLI entry point\n\u2502   \u251c\u2500\u2500 file_item.py       # File handling logic\n\u2502   \u251c\u2500\u2500 template_renderer.py # Jinja2 template rendering\n\u2502   \u251c\u2500\u2500 content_fetcher.py # Remote content fetching\n\u2502   \u251c\u2500\u2500 model_wrapper.py   # AI model integration\n\u2502   \u2514\u2500\u2500 utils.py           # Utility functions\n\u251c\u2500\u2500 tests/                  # Test suite\n\u251c\u2500\u2500 docs/                   # Documentation\n\u251c\u2500\u2500 examples/              # Example configurations\n\u251c\u2500\u2500 requirements.txt       # Production dependencies\n\u251c\u2500\u2500 requirements.dev.txt   # Development dependencies\n\u251c\u2500\u2500 setup.py              # Package configuration\n\u251c\u2500\u2500 struct-schema.json    # JSON schema for validation\n\u2514\u2500\u2500 README.md             # Project overview\n</code></pre>"},{"location":"contributing/#issue-labels","title":"\ud83c\udff7\ufe0f Issue Labels","text":"<p>We use labels to categorize issues:</p> <ul> <li><code>bug</code> - Something isn't working</li> <li><code>enhancement</code> - New feature or request</li> <li><code>documentation</code> - Improvements to documentation</li> <li><code>good first issue</code> - Good for newcomers</li> <li><code>help wanted</code> - Extra attention is needed</li> <li><code>question</code> - Further information is requested</li> </ul>"},{"location":"contributing/#communication","title":"\ud83d\udcac Communication","text":"<ul> <li>GitHub Issues - Bug reports and feature requests</li> <li>GitHub Discussions - General questions and community support</li> <li>Pull Requests - Code contributions and reviews</li> </ul>"},{"location":"contributing/#recognition","title":"\ud83d\ude4f Recognition","text":"<p>All contributors will be recognized in our documentation and releases. We appreciate every contribution, whether it's:</p> <ul> <li>Code improvements</li> <li>Bug reports</li> <li>Documentation updates</li> <li>Feature suggestions</li> <li>Community support</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"\ud83d\udcdc Code of Conduct","text":"<p>This project follows the Contributor Covenant Code of Conduct. By participating, you are expected to uphold this code.</p>"},{"location":"contributing/#getting-help","title":"\ud83e\udd1d Getting Help","text":"<p>If you need help contributing:</p> <ol> <li>Check existing documentation</li> <li>Search existing issues</li> <li>Create a new issue with the <code>question</code> label</li> <li>Join our GitHub Discussions</li> </ol> <p>Thank you for contributing to STRUCT! \ud83c\udf89</p>"},{"location":"custom-structures/","title":"Creating Custom Structures","text":"<p>Let's say you are happy with the default structures that STRUCT provides, but you want to customize them for your specific needs. This is totally possible!</p> <p>The best way to approach this is to have a repository where you can store your custom structures. You can then reference these structures in your <code>.struct.yaml</code> files.</p>"},{"location":"custom-structures/#suggested-repository-structure","title":"Suggested Repository Structure","text":"<p>Here is a suggested structure for your custom structures repository:</p> <pre><code>structures/\n\u251c\u2500\u2500 category1/\n\u2502   \u251c\u2500\u2500 structure1.yaml\n\u2502   \u2514\u2500\u2500 structure2.yaml\n\u251c\u2500\u2500 category2/\n\u2502   \u251c\u2500\u2500 structure1.yaml\n\u2502   \u2514\u2500\u2500 structure2.yaml\n</code></pre> <p>This way you could reference your custom structures in your <code>.struct.yaml</code> files like this:</p> <pre><code>folders:\n  - ./:\n    struct:\n      - category1/structure1\n      - category2/structure2\n    with:\n      var_in_structure1: 'value'\n</code></pre> <p>For this to work, you will need to set the path to the custom structures repository using the <code>-s</code> option when running STRUCT:</p> <pre><code>struct generate -s ~/path/to/custom-structures/structures file://.struct.yaml ./output\n</code></pre>"},{"location":"development/","title":"Development Setup","text":"<p>This guide will help you set up a development environment for contributing to STRUCT.</p>"},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Git</li> <li>Virtual environment tool (venv, virtualenv, or conda)</li> </ul>"},{"location":"development/#getting-started","title":"Getting Started","text":""},{"location":"development/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/httpdss/struct.git\ncd struct\n</code></pre>"},{"location":"development/#2-create-a-virtual-environment","title":"2. Create a Virtual Environment","text":"<pre><code>python3 -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre>"},{"location":"development/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code># Install runtime dependencies\npip install -r requirements.txt\n\n# Install development dependencies\npip install -r requirements.dev.txt\n\n# Install the package in development mode\npip install -e .\n</code></pre>"},{"location":"development/#4-verify-installation","title":"4. Verify Installation","text":"<pre><code>struct --help\n</code></pre>"},{"location":"development/#development-workflow","title":"Development Workflow","text":""},{"location":"development/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run tests with coverage\npytest --cov=struct_module\n\n# Run specific test file\npytest tests/test_specific.py\n</code></pre>"},{"location":"development/#code-quality","title":"Code Quality","text":"<p>This project uses several tools to maintain code quality:</p> <pre><code># Format code with black\nblack .\n\n# Sort imports\nisort .\n\n# Lint with flake8\nflake8 .\n\n# Type checking with mypy\nmypy struct_module/\n</code></pre>"},{"location":"development/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Install pre-commit hooks to automatically run quality checks:</p> <pre><code>pre-commit install\n</code></pre> <p>This will run formatting, linting, and tests before each commit.</p>"},{"location":"development/#project-structure","title":"Project Structure","text":"<pre><code>struct/\n\u251c\u2500\u2500 struct_module/          # Main Python package\n\u2502   \u251c\u2500\u2500 commands/          # CLI command implementations\n\u2502   \u251c\u2500\u2500 contribs/          # Built-in structure templates\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 tests/                 # Test files\n\u251c\u2500\u2500 docs/                  # Documentation\n\u251c\u2500\u2500 example/               # Example configurations\n\u251c\u2500\u2500 scripts/               # Utility scripts\n\u2514\u2500\u2500 requirements*.txt      # Dependencies\n</code></pre>"},{"location":"development/#adding-new-features","title":"Adding New Features","text":""},{"location":"development/#1-create-a-new-command","title":"1. Create a New Command","text":"<p>Commands are defined in <code>struct_module/commands/</code>. Each command should:</p> <ul> <li>Inherit from a base command class</li> <li>Include proper argument parsing</li> <li>Have comprehensive tests</li> <li>Include documentation</li> </ul> <p>Example:</p> <pre><code># struct_module/commands/my_command.py\nfrom .base import BaseCommand\n\nclass MyCommand(BaseCommand):\n    def add_arguments(self, parser):\n        parser.add_argument('--option', help='My option')\n\n    def handle(self, args):\n        # Implementation here\n        pass\n</code></pre>"},{"location":"development/#2-add-structure-templates","title":"2. Add Structure Templates","text":"<p>New structure templates go in <code>struct_module/contribs/</code>. Each template should:</p> <ul> <li>Have a clear directory structure</li> <li>Provide good documentation</li> <li>Include example usage</li> </ul>"},{"location":"development/#3-write-tests","title":"3. Write Tests","text":"<p>All new functionality must include tests:</p> <pre><code># tests/test_my_feature.py\nimport pytest\nfrom struct_module.my_feature import MyFeature\n\ndef test_my_feature():\n    feature = MyFeature()\n    result = feature.do_something()\n    assert result == expected_value\n</code></pre>"},{"location":"development/#4-update-documentation","title":"4. Update Documentation","text":"<ul> <li>Add or update relevant documentation in <code>docs/</code></li> <li>Add examples if applicable</li> </ul>"},{"location":"development/#testing","title":"Testing","text":""},{"location":"development/#unit-tests","title":"Unit Tests","text":"<p>Run unit tests to verify individual components:</p> <pre><code>pytest tests/unit/\n</code></pre>"},{"location":"development/#integration-tests","title":"Integration Tests","text":"<p>Run integration tests to verify end-to-end functionality:</p> <pre><code>pytest tests/integration/\n</code></pre>"},{"location":"development/#debugging","title":"Debugging","text":""},{"location":"development/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code>struct --log=DEBUG generate my-config.yaml ./output\n</code></pre>"},{"location":"development/#use-python-debugger","title":"Use Python Debugger","text":"<p>Add breakpoints in your code:</p> <pre><code>import pdb; pdb.set_trace()\n</code></pre> <pre><code>struct --log=DEBUG generate my-config.yaml ./output\n</code></pre>"},{"location":"development/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"development/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8</li> <li>Use type hints where appropriate</li> <li>Write docstrings for public functions</li> <li>Keep functions small and focused</li> </ul>"},{"location":"development/#commit-messages","title":"Commit Messages","text":"<p>Use conventional commit format:</p> <pre><code>feat: add new template variable filter\nfix: resolve issue with file permissions\ndocs: update installation guide\ntest: add tests for mappings functionality\n</code></pre>"},{"location":"development/#pull-requests","title":"Pull Requests","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch: <code>git checkout -b feature/my-feature</code></li> <li>Make your changes</li> <li>Write tests</li> <li>Update documentation</li> <li>Submit a pull request</li> </ol>"},{"location":"development/#review-process","title":"Review Process","text":"<p>All pull requests must:</p> <ul> <li>Pass all tests</li> <li>Include appropriate documentation</li> <li>Follow code style guidelines</li> <li>Have a clear description of changes</li> </ul>"},{"location":"development/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/#common-issues","title":"Common Issues","text":"<p>Import errors: Make sure you've installed the package in development mode:</p> <pre><code>pip install -e .\n</code></pre> <p>Test failures: Ensure all dependencies are installed:</p> <pre><code>pip install -r requirements.dev.txt\n</code></pre> <p>Permission errors: Check file permissions and ensure you're in the right directory.</p>"},{"location":"development/#getting-help","title":"Getting Help","text":"<ul> <li>Check existing issues on GitHub</li> <li>Join our Discord community</li> <li>Read the documentation thoroughly</li> <li>Ask questions in discussions</li> </ul>"},{"location":"development/#resources","title":"Resources","text":"<ul> <li>Python Development Guide</li> <li>pytest Documentation</li> <li>GitHub Flow</li> <li>Conventional Commits</li> </ul>"},{"location":"file-handling/","title":"File Handling","text":"<p>STRUCT provides flexible options for handling files and managing permissions.</p>"},{"location":"file-handling/#file-properties","title":"File Properties","text":""},{"location":"file-handling/#basic-properties","title":"Basic Properties","text":"<ul> <li>skip: Skip file/folder creation entirely</li> <li>skip_if_exists: Skip only if the file already exists</li> <li>permissions: Set custom file permissions</li> <li>content: Define file content inline</li> <li>file: Reference external file content</li> </ul>"},{"location":"file-handling/#skip-behavior","title":"Skip Behavior","text":"<pre><code>files:\n  - README.md:\n      skip: true  # Never create this file\n      content: \"This won't be created\"\n\n  - config.yml:\n      skip_if_exists: true  # Only create if it doesn't exist\n      content: \"default: value\"\n</code></pre>"},{"location":"file-handling/#file-permissions","title":"File Permissions","text":"<p>Set custom permissions using octal notation:</p> <pre><code>files:\n  - scripts/deploy.sh:\n      permissions: '0755'  # Executable script\n      content: |\n        #!/bin/bash\n        echo \"Deploying...\"\n\n  - secrets/api.key:\n      permissions: '0600'  # Read-only for owner\n      content: \"{{@ api_key @}}\"\n</code></pre>"},{"location":"file-handling/#content-sources","title":"Content Sources","text":""},{"location":"file-handling/#inline-content","title":"Inline Content","text":"<p>Define content directly in the YAML:</p> <pre><code>files:\n  - app.py:\n      content: |\n        #!/usr/bin/env python3\n        print(\"Hello, {{@ project_name @}}!\")\n</code></pre>"},{"location":"file-handling/#external-files","title":"External Files","text":"<p>Reference local or remote files:</p> <pre><code>files:\n  - LICENSE:\n      file: https://raw.githubusercontent.com/nishanths/license/master/LICENSE\n</code></pre>"},{"location":"file-handling/#remote-file-protocols","title":"Remote File Protocols","text":"<p>STRUCT supports multiple protocols for fetching remote content:</p>"},{"location":"file-handling/#httphttps","title":"HTTP/HTTPS","text":"<pre><code>files:\n  - requirements.txt:\n      file: https://raw.githubusercontent.com/example/repo/main/requirements.txt\n</code></pre>"},{"location":"file-handling/#github-protocols","title":"GitHub Protocols","text":""},{"location":"file-handling/#standard-github","title":"Standard GitHub","text":"<pre><code>files:\n  - .gitignore:\n      file: github://github/gitignore/main/Python.gitignore\n</code></pre>"},{"location":"file-handling/#github-https","title":"GitHub HTTPS","text":"<pre><code>files:\n  - workflow.yml:\n      file: githubhttps://actions/starter-workflows/main/ci/python-app.yml\n</code></pre>"},{"location":"file-handling/#github-ssh","title":"GitHub SSH","text":"<pre><code>files:\n  - private-config.yml:\n      file: githubssh://company/private-repo/main/config/template.yml\n</code></pre>"},{"location":"file-handling/#cloud-storage","title":"Cloud Storage","text":""},{"location":"file-handling/#amazon-s3","title":"Amazon S3","text":"<pre><code>files:\n  - data.csv:\n      file: s3://my-bucket/data/template.csv\n</code></pre>"},{"location":"file-handling/#google-cloud-storage","title":"Google Cloud Storage","text":"<pre><code>files:\n  - config.json:\n      file: gs://my-bucket/configs/default.json\n</code></pre>"},{"location":"file-handling/#file-handling-strategies","title":"File Handling Strategies","text":"<p>Control how STRUCT handles existing files with the <code>--file-strategy</code> option:</p>"},{"location":"file-handling/#available-strategies","title":"Available Strategies","text":"<ul> <li>overwrite: Replace existing files (default)</li> <li>skip: Skip files that already exist</li> <li>append: Add content to existing files</li> <li>rename: Rename existing files with a suffix</li> <li>backup: Move existing files to backup directory</li> </ul>"},{"location":"file-handling/#usage-examples","title":"Usage Examples","text":"<pre><code># Skip existing files\nstruct generate --file-strategy=skip my-config.yaml ./output\n\n# Backup existing files\nstruct generate --file-strategy=backup --backup=/tmp/backup my-config.yaml ./output\n\n# Rename existing files\nstruct generate --file-strategy=rename my-config.yaml ./output\n</code></pre> <p>Note: The <code>file://</code> protocol is automatically added for <code>.yaml</code> files, so these examples work with or without the explicit protocol.</p>"},{"location":"file-handling/#advanced-examples","title":"Advanced Examples","text":""},{"location":"file-handling/#conditional-file-creation","title":"Conditional File Creation","text":"<pre><code>files:\n  - docker-compose.yml:\n      skip: \"{{@ not use_docker @}}\"\n      content: |\n        version: '3.8'\n        services:\n          app:\n            build: .\n\n  - Dockerfile:\n      skip_if_exists: true\n      permissions: '0644'\n      file: https://raw.githubusercontent.com/example/dockerfiles/main/python.Dockerfile\n</code></pre>"},{"location":"file-handling/#dynamic-permissions","title":"Dynamic Permissions","text":"<pre><code>files:\n  - \"scripts/{{@ script_name @}}.sh\":\n      permissions: '0755'\n      content: |\n        #!/bin/bash\n        # {{@ script_description @}}\n        echo \"Running {{@ script_name @}}\"\n</code></pre>"},{"location":"file-handling/#multiple-content-sources","title":"Multiple Content Sources","text":"<pre><code>files:\n  - README.md:\n      content: |\n        # {{@ project_name @}}\n\n        ## Installation\n\n        ```bash\n        pip install -r requirements.txt\n        ```\n\n  - requirements.txt:\n      file: https://raw.githubusercontent.com/example/templates/main/python-requirements.txt\n\n  - .env.example:\n      file: file://./templates/env-template\n</code></pre>"},{"location":"file-handling/#best-practices","title":"Best Practices","text":"<ol> <li>Use <code>skip_if_exists</code> for configuration files that shouldn't be overwritten</li> <li>Set appropriate permissions for scripts and sensitive files</li> <li>Use remote files for standardized content like licenses and gitignores</li> <li>Combine strategies with command-line options for different deployment scenarios</li> <li>Test with <code>--dry-run</code> before applying changes to important directories</li> </ol>"},{"location":"funding/","title":"Funding STRUCT","text":"<p>STRUCT is an open-source project that helps developers create consistent project structures and automate repetitive setup tasks. Your support helps us maintain and improve this tool for the entire community.</p>"},{"location":"funding/#support-options","title":"\ud83d\udcb0 Support Options","text":""},{"location":"funding/#github-sponsors","title":"GitHub Sponsors","text":"<p>The easiest way to support STRUCT development is through GitHub Sponsors:</p> <ul> <li>Sponsor @httpdss on GitHub</li> </ul> <p>GitHub Sponsors allows for recurring monthly contributions or one-time donations. All funds go directly toward:</p> <ul> <li>Development time for new features</li> <li>Bug fixes and maintenance</li> <li>Documentation improvements</li> <li>Community support</li> <li>Infrastructure costs</li> </ul>"},{"location":"funding/#patreon","title":"Patreon","text":"<p>For ongoing support with additional perks:</p> <ul> <li>Support STRUCT on Patreon</li> </ul> <p>Patreon supporters get access to:</p> <ul> <li>Early previews of new features</li> <li>Direct input on roadmap priorities</li> <li>Exclusive development updates</li> <li>Recognition in project documentation</li> </ul>"},{"location":"funding/#one-time-donations","title":"One-Time Donations","text":"<p>For one-time contributions:</p> <ul> <li>PayPal: Donate via PayPal</li> </ul>"},{"location":"funding/#alternative-ways-to-support","title":"\ud83e\udd1d Alternative Ways to Support","text":"<p>If financial contribution isn't possible, you can still support STRUCT:</p>"},{"location":"funding/#code-contributions","title":"Code Contributions","text":"<ul> <li>Submit bug fixes and new features</li> <li>Improve documentation</li> <li>Add new contrib structures</li> <li>Help with testing and quality assurance</li> </ul>"},{"location":"funding/#community-support","title":"Community Support","text":"<ul> <li>Answer questions in GitHub Discussions</li> <li>Help other users in issues</li> <li>Share STRUCT on social media</li> <li>Write blog posts or tutorials</li> </ul>"},{"location":"funding/#feedback-and-testing","title":"Feedback and Testing","text":"<ul> <li>Report bugs and issues</li> <li>Suggest new features</li> <li>Test beta releases</li> <li>Provide user experience feedback</li> </ul> <p>Every contribution, no matter the size, helps make STRUCT better for everyone. Thank you for your support! \ud83c\udf89</p>"},{"location":"github-integration/","title":"GitHub Integration","text":"<p>STRUCT can seamlessly integrate with GitHub to automate the generation of project structures across repositories.</p>"},{"location":"github-integration/#automating-struct","title":"Automating STRUCT","text":"<p>Combine GitHub Actions with STRUCT to automate project structure generation in CI/CD pipelines. Trigger the process manually or automatically based on events like pull requests or pushes.</p> <p>Example Workflow:</p> <pre><code>name: run-struct\n\non:\n  workflow_dispatch:\n\njobs:\n  generate:\n    uses: httpdss/struct/.github/workflows/struct-generate.yaml@main\n    secrets:\n      token: ${{ secrets.STRUCT_RUN_TOKEN }}\n</code></pre>"},{"location":"github-integration/#best-practices","title":"Best Practices","text":"<ol> <li>Secure Your Token: Store GitHub tokens in secrets management tools.</li> <li>Use Topics for Filtering: Organize repositories with topics to efficiently manage workflows.</li> <li>Test Locally First: Simulate script actions with <code>--dry-run</code> before executing in a CI/CD environment.</li> <li>Combine with Other Tools: Use STRUCT with Terraform, Ansible, or Docker for comprehensive project management.</li> </ol>"},{"location":"github-integration/#faqs","title":"FAQs","text":""},{"location":"github-integration/#why-use-a-github-integration","title":"Why use a GitHub Integration?","text":"<p>Using GitHub integration allows you to leverage STRUCT's automation capabilities in a version-controlled environment, enabling consistent and repeatable project structures.</p>"},{"location":"github-integration/#can-i-customize-the-github-action","title":"Can I customize the GitHub Action?","text":"<p>Yes, you can tailor the GitHub Action to your specific needs, including custom triggers, different environments, and additional dependencies.</p>"},{"location":"hooks/","title":"Pre-generation and Post-generation Hooks","text":"<p>You can define shell commands to run before and after structure generation using the <code>pre_hooks</code> and <code>post_hooks</code> keys in your YAML configuration. These are optional and allow you to automate setup or cleanup steps.</p>"},{"location":"hooks/#hook-types","title":"Hook Types","text":"<ul> <li>pre_hooks: List of shell commands to run before generation. If any command fails (non-zero exit), generation is aborted.</li> <li>post_hooks: List of shell commands to run after generation completes. If any command fails, an error is shown.</li> </ul>"},{"location":"hooks/#basic-example","title":"Basic Example","text":"<pre><code>pre_hooks:\n  - echo \"Preparing environment...\"\n  - ./scripts/prep.sh\n\npost_hooks:\n  - echo \"Generation complete!\"\n  - ./scripts/cleanup.sh\n\nfiles:\n  - README.md:\n      content: |\n        # My Project\n</code></pre>"},{"location":"hooks/#how-hooks-work","title":"How Hooks Work","text":""},{"location":"hooks/#pre-hooks","title":"Pre-hooks","text":"<ol> <li>Execute in the order defined</li> <li>Run before any files or folders are created</li> <li>If any command returns non-zero exit code, generation stops</li> <li>Useful for environment preparation, validation, or dependency checks</li> </ol>"},{"location":"hooks/#post-hooks","title":"Post-hooks","text":"<ol> <li>Execute after all files and folders are created</li> <li>Run even if some file operations fail</li> <li>Errors are reported but don't stop execution</li> <li>Useful for cleanup, initialization, or notification tasks</li> </ol>"},{"location":"hooks/#output-handling","title":"Output Handling","text":"<ul> <li>Output from hooks (stdout and stderr) is shown in the terminal</li> <li>Hook execution is logged with appropriate log levels</li> <li>Failed hooks display error messages with exit codes</li> </ul>"},{"location":"hooks/#practical-examples","title":"Practical Examples","text":""},{"location":"hooks/#environment-setup","title":"Environment Setup","text":"<pre><code>pre_hooks:\n  - python -m venv .venv\n  - source .venv/bin/activate\n  - pip install --upgrade pip\n\npost_hooks:\n  - source .venv/bin/activate\n  - pip install -r requirements.txt\n  - echo \"Virtual environment ready!\"\n\nfiles:\n  - requirements.txt:\n      content: |\n        flask==2.3.0\n        requests==2.31.0\n</code></pre>"},{"location":"hooks/#git-repository-initialization","title":"Git Repository Initialization","text":"<pre><code>pre_hooks:\n  - git --version  # Verify git is available\n\npost_hooks:\n  - git init\n  - git add .\n  - git commit -m \"Initial commit from STRUCT\"\n  - echo \"Git repository initialized\"\n\nfiles:\n  - .gitignore:\n      file: github://github/gitignore/main/Python.gitignore\n  - README.md:\n      content: |\n        # {{@ project_name @}}\n        Generated with STRUCT\n</code></pre>"},{"location":"hooks/#docker-setup","title":"Docker Setup","text":"<pre><code>pre_hooks:\n  - docker --version\n  - echo \"Setting up Docker environment...\"\n\npost_hooks:\n  - docker build -t {{@ project_name | slugify @}} .\n  - echo \"Docker image built successfully\"\n\nfiles:\n  - Dockerfile:\n      content: |\n        FROM python:3.11-slim\n        WORKDIR /app\n        COPY . .\n        RUN pip install -r requirements.txt\n        CMD [\"python\", \"app.py\"]\n  - docker-compose.yml:\n      content: |\n        version: '3.8'\n        services:\n          app:\n            build: .\n            ports:\n              - \"8000:8000\"\n</code></pre>"},{"location":"hooks/#database-migration","title":"Database Migration","text":"<pre><code>pre_hooks:\n  - echo \"Checking database connection...\"\n  - pg_isready -h localhost -p 5432\n\npost_hooks:\n  - python manage.py migrate\n  - python manage.py collectstatic --noinput\n  - echo \"Database migrations complete\"\n\nfiles:\n  - manage.py:\n      content: |\n        #!/usr/bin/env python\n        import os\n        import sys\n\n        if __name__ == \"__main__\":\n            os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"settings\")\n            from django.core.management import execute_from_command_line\n            execute_from_command_line(sys.argv)\n</code></pre>"},{"location":"hooks/#testing-and-validation","title":"Testing and Validation","text":"<pre><code>pre_hooks:\n  - echo \"Validating prerequisites...\"\n  - node --version\n  - npm --version\n\npost_hooks:\n  - npm install\n  - npm run lint\n  - npm test\n  - echo \"All tests passed!\"\n\nfiles:\n  - package.json:\n      content: |\n        {\n          \"name\": \"{{@ project_name | slugify @}}\",\n          \"version\": \"1.0.0\",\n          \"scripts\": {\n            \"test\": \"jest\",\n            \"lint\": \"eslint src/\"\n          }\n        }\n</code></pre>"},{"location":"hooks/#best-practices","title":"Best Practices","text":"<ol> <li>Keep hooks simple: Use external scripts for complex operations</li> <li>Handle errors gracefully: Check for tool availability in pre-hooks</li> <li>Use absolute paths: Hooks run in the target directory context</li> <li>Log important actions: Use echo statements for user feedback</li> <li>Test independently: Ensure hook commands work outside STRUCT</li> <li>Consider dependencies: Order hooks based on their requirements</li> </ol>"},{"location":"hooks/#error-handling","title":"Error Handling","text":""},{"location":"hooks/#pre-hook-failures","title":"Pre-hook Failures","text":"<pre><code>pre_hooks:\n  - echo \"Checking Python version...\"\n  - python --version || (echo \"Python not found!\" &amp;&amp; exit 1)\n  - echo \"Python check passed\"\n</code></pre>"},{"location":"hooks/#post-hook-error-tolerance","title":"Post-hook Error Tolerance","text":"<pre><code>post_hooks:\n  - npm install || echo \"Warning: npm install failed\"\n  - git add . || echo \"Warning: git add failed\"\n  - echo \"Setup complete (some warnings may have occurred)\"\n</code></pre>"},{"location":"hooks/#variables-in-hooks","title":"Variables in Hooks","text":"<p>You can use template variables in hook commands:</p> <pre><code>pre_hooks:\n  - echo \"Setting up {{@ project_name @}}\"\n  - mkdir -p \"{{@ project_name | slugify @}}\"\n\npost_hooks:\n  - echo \"{{@ project_name @}} setup complete!\"\n  - echo \"Project created in: $(pwd)\"\n\nvariables:\n  - project_name:\n      description: \"Name of the project\"\n      type: string\n      default: \"MyProject\"\n</code></pre>"},{"location":"installation/","title":"Installation Guide","text":""},{"location":"installation/#using-pip","title":"Using pip","text":"<p>Install STRUCT with pip:</p> <pre><code>pip install git+https://github.com/httpdss/struct.git\n</code></pre> <p>Enable Auto-Completion</p> <p>After installation, enable command-line auto-completion for better productivity: <pre><code>eval \"$(register-python-argcomplete struct)\"\n</code></pre> For permanent setup, see the Command-Line Completion guide.</p>"},{"location":"installation/#from-source","title":"From Source","text":"<p>Clone the repository and install locally. See the Development page for details.</p>"},{"location":"installation/#using-docker","title":"Using Docker","text":"<p>Run STRUCT without installing, using Docker:</p> <pre><code>docker run -v $(pwd):/workdir -u $(id -u):$(id -g) ghcr.io/httpdss/struct:main generate file:///workdir/example/structure.yaml /workdir/example_output\n</code></pre> <p>Refer to the Quick Start guide for more options.</p>"},{"location":"known-issues/","title":"Known Issues","text":"<p>This page tracks known issues, limitations, and workarounds for STRUCT. If you encounter any of these issues, check here for potential solutions.</p>"},{"location":"known-issues/#current-known-issues","title":"Current Known Issues","text":""},{"location":"known-issues/#performance-issues","title":"Performance Issues","text":""},{"location":"known-issues/#large-directory-structures","title":"Large Directory Structures","text":"<p>Issue: Generation becomes slow with very large directory structures (1000+ files).</p> <p>Workaround:</p> <ul> <li>Break large structures into smaller, modular components</li> <li>Use the <code>--dry-run</code> option to preview before full generation</li> <li>Consider using parallel processing for independent structures</li> </ul> <p>Status: Under investigation</p>"},{"location":"known-issues/#remote-file-fetching","title":"Remote File Fetching","text":"<p>Issue: Fetching many remote files can be slow due to sequential processing.</p> <p>Workaround:</p> <ul> <li>Cache frequently used remote files locally</li> <li>Use local mirrors when possible</li> <li>Batch remote operations when feasible</li> </ul> <p>Status: Planned for future release</p>"},{"location":"known-issues/#template-engine","title":"Template Engine","text":""},{"location":"known-issues/#complex-jinja2-expressions","title":"Complex Jinja2 Expressions","text":"<p>Issue: Very complex Jinja2 expressions may not render correctly in all contexts.</p> <p>Example:</p> <pre><code># May not work as expected\ncontent: \"{{@ complex | filter | another_filter if condition else fallback @}}\"\n</code></pre> <p>Workaround: Break complex expressions into simpler parts or use variables:</p> <pre><code>variables:\n  - intermediate_value:\n      default: \"{{@ complex | filter @}}\"\n\nfiles:\n  - test.txt:\n      content: \"{{@ intermediate_value | another_filter @}}\"\n</code></pre> <p>Status: Investigating improvements</p>"},{"location":"known-issues/#unicode-in-file-names","title":"Unicode in File Names","text":"<p>Issue: File names with unicode characters may cause issues on some filesystems.</p> <p>Workaround: Use ASCII-safe file names or test thoroughly on target systems.</p> <p>Status: Platform-specific limitation</p>"},{"location":"known-issues/#platform-specific-issues","title":"Platform-Specific Issues","text":""},{"location":"known-issues/#windows-path-handling","title":"Windows Path Handling","text":"<p>Issue: Long path names on Windows may exceed the 260-character limit.</p> <p>Workaround:</p> <ul> <li>Use shorter path names</li> <li>Enable long path support in Windows 10/11</li> <li>Use mapped drives for shorter paths</li> </ul> <p>Status: Windows limitation</p>"},{"location":"known-issues/#macos-case-sensitivity","title":"macOS Case Sensitivity","text":"<p>Issue: macOS filesystem case-insensitivity can cause conflicts with similarly named files.</p> <p>Workaround: Ensure file names differ by more than just case.</p> <p>Status: Platform limitation</p>"},{"location":"known-issues/#github-integration","title":"GitHub Integration","text":""},{"location":"known-issues/#rate-limiting","title":"Rate Limiting","text":"<p>Issue: GitHub API rate limits may affect custom filters like <code>latest_release</code>.</p> <p>Workaround:</p> <ul> <li>Set <code>GITHUB_TOKEN</code> environment variable for higher limits</li> <li>Cache results when possible</li> <li>Implement retry logic in scripts</li> </ul> <p>Status: API limitation</p>"},{"location":"known-issues/#private-repository-access","title":"Private Repository Access","text":"<p>Issue: Accessing private repositories requires proper authentication.</p> <p>Workaround: Ensure <code>GITHUB_TOKEN</code> has appropriate permissions.</p> <p>Status: Expected behavior</p>"},{"location":"known-issues/#docker-issues","title":"Docker Issues","text":""},{"location":"known-issues/#file-permissions","title":"File Permissions","text":"<p>Issue: Files created in Docker containers may have incorrect ownership.</p> <p>Workaround: Use the <code>-u $(id -u):$(id -g)</code> option when running Docker:</p> <pre><code>docker run -v $(pwd):/workdir -u $(id -u):$(id -g) ghcr.io/httpdss/struct:main generate file://config.yaml .\n</code></pre> <p>Status: Docker behavior</p>"},{"location":"known-issues/#volume-mounting","title":"Volume Mounting","text":"<p>Issue: Complex volume mounting scenarios may not work as expected.</p> <p>Workaround: Use simpler mounting patterns and absolute paths.</p> <p>Status: Docker limitation</p>"},{"location":"known-issues/#limitations","title":"Limitations","text":""},{"location":"known-issues/#template-variables","title":"Template Variables","text":""},{"location":"known-issues/#variable-scope","title":"Variable Scope","text":"<p>Limitation: Variables defined in nested structures don't propagate back to parent structures.</p> <p>Design Decision: This is intentional to maintain structure isolation.</p>"},{"location":"known-issues/#circular-references","title":"Circular References","text":"<p>Limitation: Circular references in variable definitions are not detected.</p> <p>Example:</p> <pre><code>variables:\n  - var_a:\n      default: \"{{@ var_b @}}\"\n  - var_b:\n      default: \"{{@ var_a @}}\"\n</code></pre> <p>Impact: May cause infinite loops or unexpected behavior.</p>"},{"location":"known-issues/#file-operations","title":"File Operations","text":""},{"location":"known-issues/#atomic-operations","title":"Atomic Operations","text":"<p>Limitation: File operations are not atomic - partial failures may leave the system in an inconsistent state.</p> <p>Mitigation: Use the <code>--backup</code> option for important operations.</p>"},{"location":"known-issues/#symlink-handling","title":"Symlink Handling","text":"<p>Limitation: Symbolic links are not explicitly handled and may be followed or replaced.</p> <p>Impact: May affect complex directory structures with symlinks.</p>"},{"location":"known-issues/#configuration","title":"Configuration","text":""},{"location":"known-issues/#yaml-complexity","title":"YAML Complexity","text":"<p>Limitation: Very large YAML files (&gt;10MB) may cause performance issues.</p> <p>Recommendation: Split large configurations into multiple files.</p>"},{"location":"known-issues/#schema-validation","title":"Schema Validation","text":"<p>Limitation: Schema validation doesn't catch all runtime errors.</p> <p>Note: Use <code>struct validate</code> and testing for comprehensive validation.</p>"},{"location":"known-issues/#workarounds-and-best-practices","title":"Workarounds and Best Practices","text":""},{"location":"known-issues/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Use <code>--dry-run</code> for testing large configurations</li> <li>Modularize structures instead of creating monolithic ones</li> <li>Cache remote content locally when possible</li> <li>Use specific structure paths instead of recursive searches</li> </ol>"},{"location":"known-issues/#error-prevention","title":"Error Prevention","text":"<ol> <li>Validate configurations before deployment</li> <li>Test with small datasets first</li> <li>Use version control for all configuration files</li> <li>Implement backup strategies for important operations</li> </ol>"},{"location":"known-issues/#cross-platform-compatibility","title":"Cross-Platform Compatibility","text":"<ol> <li>Test on target platforms before deployment</li> <li>Use relative paths when possible</li> <li>Avoid platform-specific commands in hooks</li> <li>Document platform requirements clearly</li> </ol>"},{"location":"known-issues/#reporting-issues","title":"Reporting Issues","text":""},{"location":"known-issues/#before-reporting","title":"Before Reporting","text":"<ol> <li>Check this known issues page</li> <li>Search existing GitHub issues</li> <li>Test with the latest version</li> <li>Prepare a minimal reproduction case</li> </ol>"},{"location":"known-issues/#issue-report-template","title":"Issue Report Template","text":"<pre><code>**STRUCT Version**: [e.g., 1.2.3]\n**Platform**: [e.g., Ubuntu 20.04, macOS 12.0, Windows 11]\n**Python Version**: [e.g., 3.9.7]\n\n**Expected Behavior**:\n[Describe what you expected to happen]\n\n**Actual Behavior**:\n[Describe what actually happened]\n\n**Reproduction Steps**:\n1. [Step 1]\n2. [Step 2]\n3. [Step 3]\n\n**Configuration File**:\n\n```yaml\n[Paste minimal configuration that reproduces the issue]\n</code></pre> <p>Error Output:</p> <pre><code>[Paste any error messages or logs]\n</code></pre> <p>Additional Context:</p> <p>[Any other relevant information]</p> <p>```text</p>"},{"location":"known-issues/#priority-guidelines","title":"Priority Guidelines","text":"<ul> <li>Critical: Security issues, data loss, system crashes</li> <li>High: Major functionality broken, widespread impact</li> <li>Medium: Minor functionality issues, workarounds available</li> <li>Low: Enhancement requests, documentation issues</li> </ul>"},{"location":"known-issues/#contributing-fixes","title":"Contributing Fixes","text":"<p>We welcome contributions to fix known issues:</p> <ol> <li>Fork the repository</li> <li>Create a feature branch: <code>git checkout -b fix/issue-name</code></li> <li>Write tests for your fix</li> <li>Update documentation if necessary</li> <li>Submit a pull request</li> </ol>"},{"location":"known-issues/#testing-requirements","title":"Testing Requirements","text":"<ul> <li>All existing tests must pass</li> <li>New tests should cover the fixed functionality</li> <li>Manual testing on multiple platforms when applicable</li> </ul>"},{"location":"known-issues/#version-compatibility","title":"Version Compatibility","text":""},{"location":"known-issues/#supported-versions","title":"Supported Versions","text":"<ul> <li>Latest release: Full support and active development</li> <li>Previous minor version: Security fixes and critical bugs</li> <li>Older versions: Community support only</li> </ul>"},{"location":"known-issues/#upgrade-recommendations","title":"Upgrade Recommendations","text":"<ul> <li>Test upgrades in non-production environments first</li> <li>Review changelog for breaking changes</li> <li>Update configurations for deprecated features</li> </ul> <p>This page is updated regularly. Subscribe to repository notifications for updates on issue status.</p>"},{"location":"mappings/","title":"Mappings Support","text":"<p>You can provide a mappings YAML file to inject key-value maps into your templates. This is useful for referencing environment-specific values, IDs, or any other mapping you want to use in your generated files.</p>"},{"location":"mappings/#what-are-mappings","title":"What are Mappings?","text":"<p>Mappings are external data files that provide structured key-value pairs for use in your STRUCT templates. They allow you to:</p> <ul> <li>Separate data from templates</li> <li>Share common values across multiple structures</li> <li>Manage environment-specific configurations</li> <li>Centralize reference data like account IDs, team names, or service endpoints</li> </ul>"},{"location":"mappings/#mappings-file-format","title":"Mappings File Format","text":""},{"location":"mappings/#basic-structure","title":"Basic Structure","text":"<pre><code>mappings:\n  teams:\n    devops: devops-team\n    frontend: frontend-team\n    backend: backend-team\n\n  aws_account_ids:\n    development: 123456789012\n    staging: 234567890123\n    production: 345678901234\n\n  service_endpoints:\n    api_gateway: https://api.example.com\n    database: postgres://db.example.com:5432\n    redis: redis://cache.example.com:6379\n</code></pre>"},{"location":"mappings/#nested-mappings","title":"Nested Mappings","text":"<pre><code>mappings:\n  environments:\n    development:\n      database_url: postgres://dev-db:5432/myapp\n      redis_url: redis://dev-cache:6379\n      debug: true\n\n    production:\n      database_url: postgres://prod-db:5432/myapp\n      redis_url: redis://prod-cache:6379\n      debug: false\n\n  regions:\n    us_east_1:\n      vpc_id: vpc-12345\n      subnet_ids:\n        - subnet-abc123\n        - subnet-def456\n\n    eu_west_1:\n      vpc_id: vpc-67890\n      subnet_ids:\n        - subnet-ghi789\n        - subnet-jkl012\n</code></pre>"},{"location":"mappings/#using-mappings-in-templates","title":"Using Mappings in Templates","text":""},{"location":"mappings/#basic-usage","title":"Basic Usage","text":"<p>Reference mapping values using the <code>mappings</code> variable:</p> <pre><code>files:\n  - config.yml:\n      content: |\n        database_url: {{@ mappings.service_endpoints.database @}}\n        api_endpoint: {{@ mappings.service_endpoints.api_gateway @}}\n\n        # Team information\n        owner: {{@ mappings.teams.backend @}}\n</code></pre>"},{"location":"mappings/#array-access","title":"Array Access","text":"<p>For nested structures and arrays:</p> <pre><code>files:\n  - terraform/main.tf:\n      content: |\n        resource \"aws_instance\" \"web\" {\n          ami           = \"ami-12345\"\n          instance_type = \"t3.micro\"\n\n          vpc_security_group_ids = [\n            \"{{@ mappings.regions.us_east_1.vpc_id @}}\"\n          ]\n\n          subnet_id = \"{{@ mappings.regions.us_east_1.subnet_ids[0] @}}\"\n        }\n</code></pre>"},{"location":"mappings/#dynamic-key-access","title":"Dynamic Key Access","text":"<p>Use bracket notation for dynamic keys:</p> <pre><code>files:\n  - app.py:\n      content: |\n        import os\n\n        ENVIRONMENT = \"{{@ environment @}}\"\n        DATABASE_URL = \"{{@ mappings.environments[environment].database_url @}}\"\n        DEBUG = {{@ mappings.environments[environment].debug @}}\n\nvariables:\n  - environment:\n      description: \"Target environment\"\n      type: string\n      default: \"development\"\n</code></pre>"},{"location":"mappings/#using-mappings-in-the-with-clause","title":"Using Mappings in the <code>with</code> Clause","text":"<p>You can assign values from mappings directly in the <code>with</code> clause for folder struct calls:</p> <pre><code>folders:\n  - ./infrastructure:\n      struct: terraform/aws-vpc\n      with:\n        vpc_id: {{@ mappings.regions.us_east_1.vpc_id @}}\n        subnet_ids: {{@ mappings.regions.us_east_1.subnet_ids @}}\n\n  - ./backend:\n      struct: project/django\n      with:\n        team: {{@ mappings.teams.backend @}}\n        database_url: {{@ mappings.environments.production.database_url @}}\n</code></pre> <p>This approach allows you to pass specific mapping values as variables to nested structures.</p>"},{"location":"mappings/#command-line-usage","title":"Command Line Usage","text":"<p>Use the <code>--mappings-file</code> argument with the <code>generate</code> command:</p> <pre><code># Both commands work identically - file:// is automatically added for .yaml files\nstruct generate --mappings-file ./mymap.yaml my-struct.yaml .\nstruct generate --mappings-file ./mymap.yaml file://my-struct.yaml .\n</code></pre>"},{"location":"mappings/#multiple-mappings-files","title":"Multiple Mappings Files","text":"<p>You can specify multiple mappings files that will be merged in order:</p> <pre><code>struct generate \\\n  --mappings-file ./common-mappings.yaml \\\n  --mappings-file ./env-specific-mappings.yaml \\\n  my-struct.yaml .\n</code></pre> <p>Merging behavior:</p> <ul> <li>Files are processed in the order specified</li> <li>Later files override earlier ones for conflicting keys</li> <li>Deep merging is performed for nested dictionaries</li> <li>This enables clean separation of common vs environment-specific configuration</li> </ul> <p>Example with environment variable:</p> <pre><code>struct generate \\\n  --mappings-file ./mappings/common.yaml \\\n  --mappings-file ./mappings/${ENVIRONMENT}.yaml \\\n  infrastructure.yaml \\\n  ./output\n</code></pre>"},{"location":"mappings/#practical-examples","title":"Practical Examples","text":""},{"location":"mappings/#multi-environment-deployment","title":"Multi-Environment Deployment","text":"<p>mappings.yaml:</p> <pre><code>mappings:\n  environments:\n    dev:\n      namespace: myapp-dev\n      replicas: 1\n      image_tag: latest\n      resources:\n        cpu: 100m\n        memory: 128Mi\n\n    prod:\n      namespace: myapp-prod\n      replicas: 3\n      image_tag: v1.2.3\n      resources:\n        cpu: 500m\n        memory: 512Mi\n</code></pre> <p>k8s-deployment.yaml template:</p> <pre><code>files:\n  - k8s/deployment.yaml:\n      content: |\n        apiVersion: apps/v1\n        kind: Deployment\n        metadata:\n          name: {{@ app_name @}}\n          namespace: {{@ mappings.environments[target_env].namespace @}}\n        spec:\n          replicas: {{@ mappings.environments[target_env].replicas @}}\n          template:\n            spec:\n              containers:\n              - name: app\n                image: myapp:{{@ mappings.environments[target_env].image_tag @}}\n                resources:\n                  requests:\n                    cpu: {{@ mappings.environments[target_env].resources.cpu @}}\n                    memory: {{@ mappings.environments[target_env].resources.memory @}}\n\nvariables:\n  - target_env:\n      description: \"Target environment (dev/prod)\"\n      type: string\n      default: \"dev\"\n  - app_name:\n      description: \"Application name\"\n      type: string\n</code></pre>"},{"location":"mappings/#team-specific-configurations","title":"Team-Specific Configurations","text":"<p>teams.yaml:</p> <pre><code>mappings:\n  teams:\n    platform:\n      email: platform@company.com\n      slack: \"#platform-team\"\n      oncall: platform-oncall@company.com\n\n    data:\n      email: data@company.com\n      slack: \"#data-team\"\n      oncall: data-oncall@company.com\n</code></pre> <p>Usage:</p> <pre><code>folders:\n  - ./services/api:\n      struct: service/rest-api\n      with:\n        team_email: {{@ mappings.teams.platform.email @}}\n        team_slack: {{@ mappings.teams.platform.slack @}}\n\n  - ./services/etl:\n      struct: service/data-pipeline\n      with:\n        team_email: {{@ mappings.teams.data.email @}}\n        team_slack: {{@ mappings.teams.data.slack @}}\n</code></pre>"},{"location":"mappings/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Organize by Context: Group related mappings together (e.g., environments, teams, regions)</p> </li> <li> <p>Use Consistent Naming: Follow naming conventions across all mapping files</p> </li> <li> <p>Version Control: Keep mappings files in version control alongside your structures</p> </li> <li> <p>Validate Data: Ensure mapping values are correct before generating structures</p> </li> <li> <p>Document Mappings: Include comments or separate documentation for complex mappings</p> </li> <li> <p>Environment Separation: Use separate mapping files for different environments</p> </li> <li> <p>Default Values: Provide sensible defaults in your templates for missing mappings</p> </li> </ol>"},{"location":"mappings/#error-handling","title":"Error Handling","text":"<p>If a mapping key doesn't exist, STRUCT will show an error:</p> <pre><code>files:\n  - config.yml:\n      content: |\n        # This will cause an error if 'nonexistent' key doesn't exist\n        value: {{@ mappings.nonexistent.key @}}\n</code></pre> <p>Use the <code>default</code> filter to provide fallbacks:</p> <pre><code>files:\n  - config.yml:\n      content: |\n        # This provides a fallback value\n        value: {{@ mappings.team.devops | default \"no_team\" @}}\n</code></pre>"},{"location":"mcp-integration/","title":"MCP (Model Context Protocol) Integration","text":"<p>The struct tool now supports MCP (Model Context Protocol) integration, providing a programmable interface to interact with structure definitions. This enables automation and integration with other tools, particularly AI-assisted development workflows.</p>"},{"location":"mcp-integration/#available-mcp-tools","title":"Available MCP Tools","text":""},{"location":"mcp-integration/#1-list_structures","title":"1. list_structures","text":"<p>Lists all available structure definitions.</p> <pre><code>{\n  \"name\": \"list_structures\",\n  \"arguments\": {\n    \"structures_path\": \"/path/to/custom/structures\"  // optional\n  }\n}\n</code></pre> <p>Parameters: - <code>structures_path</code> (optional): Custom path to structure definitions</p>"},{"location":"mcp-integration/#2-get_structure_info","title":"2. get_structure_info","text":"<p>Get detailed information about a specific structure.</p> <pre><code>{\n  \"name\": \"get_structure_info\",\n  \"arguments\": {\n    \"structure_name\": \"project/python\",\n    \"structures_path\": \"/path/to/custom/structures\"  // optional\n  }\n}\n</code></pre> <p>Parameters: - <code>structure_name</code> (required): Name of the structure to get info about - <code>structures_path</code> (optional): Custom path to structure definitions</p>"},{"location":"mcp-integration/#3-generate_structure","title":"3. generate_structure","text":"<p>Generate a project structure using specified definition and options.</p> <pre><code>{\n  \"name\": \"generate_structure\",\n  \"arguments\": {\n    \"structure_definition\": \"project/python\",\n    \"base_path\": \"/tmp/myproject\",\n    \"output\": \"console\",  // \"console\" or \"files\"\n    \"dry_run\": false,\n    \"mappings\": {\n      \"project_name\": \"MyProject\",\n      \"author\": \"John Doe\"\n    },\n    \"structures_path\": \"/path/to/custom/structures\"  // optional\n  }\n}\n</code></pre> <p>Parameters: - <code>structure_definition</code> (required): Name or path to the structure definition - <code>base_path</code> (required): Base path where the structure should be generated - <code>output</code> (optional): Output mode - \"console\" for stdout or \"files\" for actual generation (default: \"files\") - <code>dry_run</code> (optional): Perform a dry run without creating actual files (default: false) - <code>mappings</code> (optional): Variable mappings for template substitution - <code>structures_path</code> (optional): Custom path to structure definitions</p>"},{"location":"mcp-integration/#4-validate_structure","title":"4. validate_structure","text":"<p>Validate a structure configuration YAML file.</p> <pre><code>{\n  \"name\": \"validate_structure\",\n  \"arguments\": {\n    \"yaml_file\": \"/path/to/structure.yaml\"\n  }\n}\n</code></pre> <p>Parameters: - <code>yaml_file</code> (required): Path to the YAML configuration file to validate</p>"},{"location":"mcp-integration/#usage","title":"Usage","text":""},{"location":"mcp-integration/#starting-the-mcp-server","title":"Starting the MCP Server","text":"<p>To start the MCP server for stdio communication:</p> <pre><code>struct mcp --server\n</code></pre>"},{"location":"mcp-integration/#command-line-integration","title":"Command Line Integration","text":"<p>The existing <code>list</code> and <code>info</code> commands now support an optional <code>--mcp</code> flag:</p> <pre><code># List structures with MCP support\nstruct list --mcp\n\n# Get structure info with MCP support\nstruct info project/python --mcp\n</code></pre>"},{"location":"mcp-integration/#mcp-client-integration","title":"MCP Client Integration","text":""},{"location":"mcp-integration/#claude-desktop-integration","title":"Claude Desktop Integration","text":"<p>Add the following to your Claude Desktop configuration file:</p> <p>macOS: <code>~/Library/Application Support/Claude/claude_desktop_config.json</code> Windows: <code>%APPDATA%\\Claude\\claude_desktop_config.json</code> Linux: <code>~/.config/claude/claude_desktop_config.json</code></p> <pre><code>{\n  \"mcpServers\": {\n    \"struct\": {\n      \"command\": \"struct\",\n      \"args\": [\"mcp\", \"--server\"],\n      \"cwd\": \"/path/to/your/project\"\n    }\n  }\n}\n</code></pre>"},{"location":"mcp-integration/#clinecontinue-integration","title":"Cline/Continue Integration","text":"<p>For Cline (VS Code extension), add to your <code>.cline_mcp_settings.json</code>:</p> <pre><code>{\n  \"mcpServers\": {\n    \"struct\": {\n      \"command\": \"struct\",\n      \"args\": [\"mcp\", \"--server\"]\n    }\n  }\n}\n</code></pre>"},{"location":"mcp-integration/#custom-mcp-client-integration","title":"Custom MCP Client Integration","text":"<p>For any MCP-compatible client, use these connection parameters:</p> <pre><code>// Node.js example\nimport { StdioClientTransport } from '@modelcontextprotocol/sdk/client/stdio.js';\nimport { Client } from '@modelcontextprotocol/sdk/client/index.js';\n\nconst transport = new StdioClientTransport({\n  command: 'struct',\n  args: ['mcp', '--server']\n});\n\nconst client = new Client(\n  {\n    name: \"struct-client\",\n    version: \"1.0.0\"\n  },\n  {\n    capabilities: {}\n  }\n);\n\nawait client.connect(transport);\n</code></pre> <pre><code># Python example\nimport asyncio\nfrom mcp import ClientSession, StdioServerParameters\nfrom mcp.client.stdio import stdio_client\n\nasync def main():\n    server_params = StdioServerParameters(\n        command=\"struct\",\n        args=[\"mcp\", \"--server\"]\n    )\n\n    async with stdio_client(server_params) as (read, write):\n        async with ClientSession(read, write) as session:\n            await session.initialize()\n\n            # List available tools\n            tools = await session.list_tools()\n            print(f\"Available tools: {[tool.name for tool in tools.tools]}\")\n\n            # Call a tool\n            result = await session.call_tool(\"list_structures\", {})\n            print(result.content[0].text)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"mcp-integration/#ai-assisted-development-workflows","title":"AI-Assisted Development Workflows","text":"<p>The MCP integration is particularly powerful for AI-assisted development workflows:</p>"},{"location":"mcp-integration/#console-output-mode","title":"Console Output Mode","text":"<p>Using <code>output: \"console\"</code> with <code>generate_structure</code> allows piping structure content to stdout for subsequent AI prompts:</p> <pre><code># Generate structure content to console for AI review\nstruct mcp --server | ai-tool \"Review this project structure\"\n</code></pre>"},{"location":"mcp-integration/#chaining-operations","title":"Chaining Operations","text":"<p>The MCP tools can be chained together for complex workflows:</p> <ol> <li>List available structures</li> <li>Get detailed info about a specific structure</li> <li>Generate the structure with custom mappings</li> <li>Validate any custom configurations</li> </ol>"},{"location":"mcp-integration/#integration-examples","title":"Integration Examples","text":"<p>Example 1: Generate and Review <pre><code>// 1. Generate structure to console\n{\n  \"name\": \"generate_structure\",\n  \"arguments\": {\n    \"structure_definition\": \"project/python\",\n    \"base_path\": \"/tmp/review\",\n    \"output\": \"console\"\n  }\n}\n\n// 2. Use output as context for AI code review\n</code></pre></p> <p>Example 2: Custom Structure Validation <pre><code>// 1. Validate custom structure\n{\n  \"name\": \"validate_structure\",\n  \"arguments\": {\n    \"yaml_file\": \"/path/to/custom-structure.yaml\"\n  }\n}\n\n// 2. If valid, generate using the custom structure\n{\n  \"name\": \"generate_structure\",\n  \"arguments\": {\n    \"structure_definition\": \"file:///path/to/custom-structure.yaml\",\n    \"base_path\": \"/tmp/project\"\n  }\n}\n</code></pre></p>"},{"location":"mcp-integration/#configuration","title":"Configuration","text":""},{"location":"mcp-integration/#environment-variables","title":"Environment Variables","text":"<p>The MCP server respects the same environment variables as the regular struct tool: - <code>STRUCT_STRUCTURES_PATH</code>: Default path for structure definitions - Any mapping variables used in templates</p>"},{"location":"mcp-integration/#client-configuration-examples","title":"Client Configuration Examples","text":""},{"location":"mcp-integration/#1-basic-configuration","title":"1. Basic Configuration","text":"<pre><code>{\n  \"command\": \"struct\",\n  \"args\": [\"mcp\", \"--server\"]\n}\n</code></pre>"},{"location":"mcp-integration/#2-with-custom-structures-path","title":"2. With Custom Structures Path","text":"<pre><code>{\n  \"command\": \"struct\",\n  \"args\": [\"mcp\", \"--server\"],\n  \"env\": {\n    \"STRUCT_STRUCTURES_PATH\": \"/path/to/custom/structures\"\n  }\n}\n</code></pre>"},{"location":"mcp-integration/#3-with-python-virtual-environment","title":"3. With Python Virtual Environment","text":"<pre><code>{\n  \"command\": \"/path/to/venv/bin/python\",\n  \"args\": [\"-m\", \"struct_module.main\", \"mcp\", \"--server\"],\n  \"cwd\": \"/path/to/struct/project\"\n}\n</code></pre>"},{"location":"mcp-integration/#4-using-shell-script-wrapper","title":"4. Using Shell Script Wrapper","text":"<p>Create a shell script <code>struct-mcp.sh</code>: <pre><code>#!/bin/bash\ncd /path/to/your/project\nsource .venv/bin/activate\nstruct mcp --server\n</code></pre></p> <p>Then configure your MCP client: <pre><code>{\n  \"command\": \"/path/to/struct-mcp.sh\",\n  \"args\": []\n}\n</code></pre></p>"},{"location":"mcp-integration/#quick-start-guide","title":"Quick Start Guide","text":""},{"location":"mcp-integration/#step-1-install-struct-with-mcp-support","title":"Step 1: Install struct with MCP support","text":"<pre><code>pip install struct[mcp]  # or pip install struct &amp;&amp; pip install mcp\n</code></pre>"},{"location":"mcp-integration/#step-2-test-mcp-server","title":"Step 2: Test MCP server","text":"<pre><code># Test that MCP server starts correctly\nstruct mcp --server\n# Should show: Starting MCP server...\n# Press Ctrl+C to stop\n</code></pre>"},{"location":"mcp-integration/#step-3-configure-your-mcp-client","title":"Step 3: Configure your MCP client","text":"<p>Add the configuration to your MCP client (see examples above).</p>"},{"location":"mcp-integration/#step-4-start-using-mcp-tools","title":"Step 4: Start using MCP tools","text":"<p>Once connected, you can use these tools: - <code>list_structures</code> - Get all available structures - <code>get_structure_info</code> - Get details about a specific structure - <code>generate_structure</code> - Generate project structures - <code>validate_structure</code> - Validate YAML configuration files</p>"},{"location":"mcp-integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mcp-integration/#common-issues","title":"Common Issues","text":"<ol> <li>\"Command not found: struct\"</li> <li>Solution: Ensure struct is installed and in your PATH</li> <li> <p>Alternative: Use full path to Python executable</p> </li> <li> <p>MCP server won't start</p> </li> <li>Check if <code>mcp</code> package is installed: <code>pip show mcp</code></li> <li> <p>Try running with verbose logging: <code>struct mcp --server --log DEBUG</code></p> </li> <li> <p>Client can't connect</p> </li> <li>Verify the command and args in your client configuration</li> <li>Test MCP server manually first</li> <li> <p>Check working directory and environment variables</p> </li> <li> <p>Structures not found</p> </li> <li>Set <code>STRUCT_STRUCTURES_PATH</code> environment variable</li> <li>Use absolute paths in configuration</li> <li>Verify structure files exist and are readable</li> </ol>"},{"location":"mcp-integration/#debug-mode","title":"Debug Mode","text":"<pre><code># Run with debug logging\nSTRUCT_LOG_LEVEL=DEBUG struct mcp --server\n</code></pre>"},{"location":"mcp-integration/#benefits","title":"Benefits","text":"<ol> <li>Automation: Programmatic access to all struct tool functionality</li> <li>Integration: Easy integration with other development tools</li> <li>AI Workflows: Enhanced support for AI-assisted development processes</li> <li>Consistency: Same underlying logic as CLI commands</li> <li>Flexibility: Support for custom paths, mappings, and output modes</li> </ol>"},{"location":"mcp-integration/#backward-compatibility","title":"Backward Compatibility","text":"<p>All existing struct tool functionality remains unchanged. The MCP integration is additive and does not affect existing workflows or commands.</p>"},{"location":"quickstart/","title":"Quick Start","text":""},{"location":"quickstart/#quick-start-using-docker","title":"Quick Start Using Docker","text":"<ol> <li>Create a YAML configuration file for your project structure. See sample configuration here.</li> <li>Run the following command to generate the project structure:</li> </ol> <pre><code>docker run \\\n  -v $(pwd):/workdir \\\n  -u $(id -u):$(id -g) \\\n  ghcr.io/httpdss/struct:main generate \\\n  file:///workdir/example/structure.yaml \\\n  /workdir/example_output\n</code></pre>"},{"location":"quickstart/#quick-start-using-docker-alpine","title":"Quick Start Using Docker Alpine","text":"<pre><code>docker run \\\n  -v $(pwd):/workdir \\\n  -u $(id -u):$(id -g) \\\n  ghcr.io/httpdss/struct:alpine generate \\\n  file:///workdir/example/structure.yaml \\\n  /workdir/example_output\n</code></pre> <p>For testing, you can run an alpine Docker container and install the script inside it:</p> <pre><code>docker run -it --entrypoint=\"\" python:3.10-alpine sh -l\n</code></pre> <p>Inside the container:</p> <pre><code>apk add python-pip git vim\npip install git+https://github.com/httpdss/struct.git\nmkdir example\ncd example/\ntouch structure.yaml\nvim structure.yaml # copy the content from the example folder\nstruct generate structure.yaml .\n</code></pre> <p>Note: The <code>file://</code> protocol is automatically added for <code>.yaml</code> files, so <code>structure.yaml</code> and <code>file://structure.yaml</code> work identically.</p>"},{"location":"quickstart/#discovering-available-structures","title":"Discovering Available Structures","text":"<p>Before generating, see what structures are available:</p> <pre><code>struct list\n</code></pre> <p>This shows all built-in structures you can use.</p> <p>Auto-Completion</p> <p>If you've enabled auto-completion, you can press <code>Tab</code> after <code>struct generate</code> to see all available structures!</p>"},{"location":"quickstart/#first-example","title":"First Example","text":"<p>After installing STRUCT, try this simple example:</p> <pre><code>struct generate terraform/modules/generic ./my-terraform-module\n</code></pre> <p>This will create a new terraform module structure in the <code>./my-terraform-module</code> directory.</p> <p>Or try a simple project structure:</p> <pre><code>struct generate project/nodejs ./my-node-app\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about YAML Configuration</li> <li>Explore Template Variables</li> <li>Check out Usage Examples</li> </ul>"},{"location":"schema/","title":"YAML Schema Reference","text":"<p>STRUCT provides JSON schema validation to ensure your YAML configuration files are correctly structured. This helps catch errors early and provides IDE support with autocompletion.</p>"},{"location":"schema/#schema-location","title":"Schema Location","text":"<p>The official schema is available at:</p> <pre><code>https://raw.githubusercontent.com/httpdss/struct/main/struct-schema.json\n</code></pre>"},{"location":"schema/#ide-configuration","title":"IDE Configuration","text":""},{"location":"schema/#vs-code","title":"VS Code","text":"<ol> <li>Install the YAML extension</li> <li>Add this to your workspace settings (<code>.vscode/settings.json</code>):</li> </ol> <pre><code>{\n  \"yaml.schemas\": {\n    \"https://raw.githubusercontent.com/httpdss/struct/main/struct-schema.json\": \".struct.yaml\"\n  }\n}\n</code></pre> <p>This provides validation and autocompletion for all <code>.struct.yaml</code> files.</p>"},{"location":"schema/#jetbrains-ides-intellij-pycharm-etc","title":"JetBrains IDEs (IntelliJ, PyCharm, etc.)","text":"<ol> <li>Go to Settings \u2192 Languages &amp; Frameworks \u2192 Schemas and DTDs \u2192 JSON Schema Mappings</li> <li>Click + to add a new mapping</li> <li>Set Schema file or URL to: <code>https://raw.githubusercontent.com/httpdss/struct/main/struct-schema.json</code></li> <li>Set File path pattern to: <code>*.struct.yaml</code></li> </ol>"},{"location":"schema/#generating-custom-schema","title":"Generating Custom Schema","text":"<p>If you have custom structures, generate a schema that includes them:</p> <pre><code># Generate schema with custom structures\nstruct generate-schema -s /path/to/custom/structures -o my-schema.json\n\n# Use in VS Code settings\n{\n  \"yaml.schemas\": {\n    \"./my-schema.json\": \".struct.yaml\"\n  }\n}\n</code></pre>"},{"location":"schema/#schema-structure","title":"Schema Structure","text":"<p>The schema validates the following top-level properties:</p>"},{"location":"schema/#files-array","title":"<code>files</code> (array)","text":"<p>Defines files to be created:</p> <pre><code>files:\n  - filename.txt:\n      content: \"File contents\"\n      permissions: \"0644\"\n      skip: false\n      skip_if_exists: false\n      file: \"https://example.com/template.txt\"\n</code></pre> <p>Properties:</p> <ul> <li><code>content</code> (string): Inline file content</li> <li><code>permissions</code> (string): Octal permissions (e.g., \"0755\")</li> <li><code>skip</code> (boolean): Skip file creation</li> <li><code>skip_if_exists</code> (boolean): Skip if file exists</li> <li><code>file</code> (string): External file URL or path</li> </ul>"},{"location":"schema/#folders-array","title":"<code>folders</code> (array)","text":"<p>Defines folders and nested structures:</p> <pre><code>folders:\n  - path/to/folder:\n      struct: \"structure-name\"\n      with:\n        variable: \"value\"\n</code></pre> <p>Properties:</p> <ul> <li><code>struct</code> (string|array): Structure name(s) to apply</li> <li><code>with</code> (object): Variables to pass to the structure</li> </ul>"},{"location":"schema/#variables-array","title":"<code>variables</code> (array)","text":"<p>Defines template variables:</p> <pre><code>variables:\n  - variable_name:\n      description: \"Variable description\"\n      type: \"string\"\n      default: \"default_value\"\n</code></pre> <p>Properties:</p> <ul> <li><code>description</code> (string): Human-readable description</li> <li><code>type</code> (string): Variable type (string, integer, boolean)</li> <li><code>default</code> (any): Default value</li> </ul>"},{"location":"schema/#pre_hooks-array","title":"<code>pre_hooks</code> (array)","text":"<p>Shell commands to run before generation:</p> <pre><code>pre_hooks:\n  - \"echo 'Starting generation...'\"\n  - \"./scripts/prepare.sh\"\n</code></pre>"},{"location":"schema/#post_hooks-array","title":"<code>post_hooks</code> (array)","text":"<p>Shell commands to run after generation:</p> <pre><code>post_hooks:\n  - \"npm install\"\n  - \"git init\"\n</code></pre>"},{"location":"schema/#validation","title":"Validation","text":""},{"location":"schema/#command-line-validation","title":"Command Line Validation","text":"<pre><code># Validate a configuration file\nstruct validate my-config.yaml\n</code></pre>"},{"location":"schema/#programmatic-validation","title":"Programmatic Validation","text":"<pre><code>import json\nimport yaml\nfrom jsonschema import validate\n\n# Load schema\nwith open('struct-schema.json') as f:\n    schema = json.load(f)\n\n# Load and validate config\nwith open('my-config.yaml') as f:\n    config = yaml.safe_load(f)\n\nvalidate(config, schema)  # Raises exception if invalid\n</code></pre>"},{"location":"schema/#common-validation-errors","title":"Common Validation Errors","text":""},{"location":"schema/#invalid-file-structure","title":"Invalid File Structure","text":"<pre><code># \u274c Wrong - files should be array of objects\nfiles:\n  README.md: \"content\"\n\n# \u2705 Correct\nfiles:\n  - README.md:\n      content: \"content\"\n</code></pre>"},{"location":"schema/#missing-required-properties","title":"Missing Required Properties","text":"<pre><code># \u274c Wrong - struct property missing\nfolders:\n  - src/:\n      with:\n        name: \"myapp\"\n\n# \u2705 Correct\nfolders:\n  - src/:\n      struct: \"project/node\"\n      with:\n        name: \"myapp\"\n</code></pre>"},{"location":"schema/#invalid-variable-types","title":"Invalid Variable Types","text":"<pre><code># \u274c Wrong - type should be string\nvariables:\n  - port:\n      type: number\n      default: 8080\n\n# \u2705 Correct\nvariables:\n  - port:\n      type: integer\n      default: 8080\n</code></pre>"},{"location":"schema/#schema-extensions","title":"Schema Extensions","text":"<p>You can extend the base schema for custom validation:</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"allOf\": [\n    {\n      \"$ref\": \"https://raw.githubusercontent.com/httpdss/struct/main/struct-schema.json\"\n    },\n    {\n      \"properties\": {\n        \"custom_section\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"custom_property\": {\"type\": \"string\"}\n          }\n        }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"schema/#ide-benefits","title":"IDE Benefits","text":"<p>With schema validation enabled, you get:</p> <ul> <li>Real-time validation: Errors highlighted as you type</li> <li>Autocompletion: Suggested properties and values</li> <li>Documentation: Hover tooltips with property descriptions</li> <li>Structure guidance: Valid structure names and paths</li> </ul>"},{"location":"schema/#troubleshooting","title":"Troubleshooting","text":""},{"location":"schema/#schema-not-loading","title":"Schema Not Loading","text":"<ol> <li>Check internet connection (for remote schema)</li> <li>Verify file path (for local schema)</li> <li>Restart IDE after configuration changes</li> <li>Check IDE logs for error messages</li> </ol>"},{"location":"schema/#validation-errors","title":"Validation Errors","text":"<ol> <li>Use <code>struct validate</code> command for detailed error messages</li> <li>Check schema documentation for required properties</li> <li>Verify YAML syntax is correct</li> <li>Ensure structure names exist in your installation</li> </ol>"},{"location":"schema/#performance-issues","title":"Performance Issues","text":"<ol> <li>Use local schema files for better performance</li> <li>Consider schema caching in your IDE</li> <li>Limit schema complexity for large configurations</li> </ol> <p>This schema system ensures your STRUCT configurations are valid and provides a better development experience through IDE integration.</p>"},{"location":"structures/","title":"List of Structures in <code>struct_module/contribs</code>","text":""},{"location":"structures/#ansible-playbook","title":"Ansible Playbook","text":"<ul> <li>File: <code>ansible-playbook.yaml</code></li> <li>Description: Contains the structure for an Ansible playbook with various components like <code>main.yml</code>, <code>vars.yml</code>, <code>tasks/main.yml</code>, <code>handlers/main.yml</code>, <code>templates/README.md</code>, and <code>README.md</code>.</li> <li>Structure name: <code>ansible_playbook</code></li> </ul>"},{"location":"structures/#cicd-pipelines","title":"CI/CD Pipelines","text":"<ul> <li>File: <code>ci-cd-pipelines.yaml</code></li> <li>Description: Defines the structure for CI/CD pipelines including <code>.gitlab-ci.yml</code>, <code>Jenkinsfile</code>, <code>.github/workflows/ci.yml</code>, and <code>.github/workflows/cd.yml</code>.</li> <li>Structure name: <code>ci_cd_pipelines</code></li> </ul>"},{"location":"structures/#cloudformation-files","title":"CloudFormation Files","text":"<ul> <li>File: <code>cloudformation-files.yaml</code></li> <li>Description: Contains the structure for AWS CloudFormation files including <code>template.yaml</code>, <code>parameters.json</code>, and <code>deploy.sh</code>.</li> <li>Structure name: <code>cloudformation_files</code></li> </ul>"},{"location":"structures/#codeowners-configuration","title":"Codeowners Configuration","text":"<ul> <li>File: <code>configs/codeowners.yaml</code></li> <li>Description: Defines the structure for a <code>CODEOWNERS</code> file.</li> <li>Structure name: <code>configs/codeowners</code></li> </ul>"},{"location":"structures/#devcontainer-configuration","title":"Devcontainer Configuration","text":"<ul> <li>File: <code>configs/devcontainer.yaml</code></li> <li>Description: Contains the structure for a <code>.devcontainer/devcontainer.json</code> file.</li> <li>Structure name: <code>configs/devcontainer</code></li> </ul>"},{"location":"structures/#editor-config","title":"Editor Config","text":"<ul> <li>File: <code>configs/editor-config.yaml</code></li> <li>Description: Defines the structure for an <code>.editorconfig</code> file.</li> <li>Structure name: <code>configs/editor-config</code></li> </ul>"},{"location":"structures/#eslint-configuration","title":"ESLint Configuration","text":"<ul> <li>File: <code>configs/eslint.yaml</code></li> <li>Description: Contains the structure for ESLint configuration files including <code>.eslintrc.json</code> and <code>.eslintignore</code>.</li> <li>Structure name: <code>configs/eslint</code></li> </ul>"},{"location":"structures/#jshint-configuration","title":"JSHint Configuration","text":"<ul> <li>File: <code>configs/jshint.yaml</code></li> <li>Description: Defines the structure for JSHint configuration files including <code>.jshintrc</code> and <code>.jshintignore</code>.</li> <li>Structure name: <code>configs/jshint</code></li> </ul>"},{"location":"structures/#kubectl-configuration","title":"Kubectl Configuration","text":"<ul> <li>File: <code>configs/kubectl.yaml</code></li> <li>Description: Contains the structure for a <code>.kuberc</code> configuration file.</li> <li>Structure name: <code>configs/kubectl</code></li> </ul>"},{"location":"structures/#prettier-configuration","title":"Prettier Configuration","text":"<ul> <li>File: <code>configs/prettier.yaml</code></li> <li>Description: Contains the structure for Prettier configuration files including <code>.prettierrc</code> and <code>.prettierignore</code>.</li> <li>Structure name: <code>configs/prettier</code></li> </ul>"},{"location":"structures/#docker-files","title":"Docker Files","text":"<ul> <li>File: <code>docker-files.yaml</code></li> <li>Description: Defines the structure for Docker-related files including <code>Dockerfile</code>, <code>.dockerignore</code>, <code>docker-compose.yml</code>, and <code>.env</code>.</li> <li>Structure name: <code>docker-files</code></li> </ul>"},{"location":"structures/#documentation-template","title":"Documentation Template","text":"<ul> <li>File: <code>documentation-template.yaml</code></li> <li>Description: Contains the structure for documentation files including <code>README.md</code>, <code>CONTRIBUTING.md</code>, <code>CODE_OF_CONDUCT.md</code>, and <code>LICENSE.md</code>.</li> <li>Structure name: <code>documentation-template</code></li> </ul>"},{"location":"structures/#git-hooks","title":"Git Hooks","text":"<ul> <li> <p>File: <code>git-hooks.yaml</code></p> </li> <li> <p>Description: Defines the structure for Git hook scripts including <code>.git/hooks/pre-commit</code>, <code>.git/hooks/pre-push</code>, and <code>.git/hooks/commit-msg</code>.</p> </li> <li>Structure name: <code>git-hooks</code></li> </ul>"},{"location":"structures/#github-workflows","title":"GitHub Workflows","text":"<ul> <li>File: <code>github/workflows/execute-tf-workflow.yaml</code></li> <li>Description: Contains the structure for a GitHub Actions workflow to execute Terraform.</li> <li>Structure name: <code>github/workflows/execute-terraform-workflow</code></li> </ul>"},{"location":"structures/#github-labeler-workflow","title":"Github Labeler Workflow","text":"<ul> <li>File: <code>github/workflows/labeler.yaml</code></li> <li>Description: Defines the structure for a GitHub Actions workflow to label issues and pull requests.</li> <li>Structure name: <code>github/workflows/labeler</code></li> </ul>"},{"location":"structures/#github-stale-workflow","title":"GitHub stale Workflow","text":"<ul> <li>File: <code>github/workflows/stale.yaml</code></li> <li>Description: Contains the structure for a GitHub Actions workflow to mark stale issues and pull requests.</li> <li>Structure name: <code>github/workflows/stale</code></li> </ul>"},{"location":"structures/#github-pre-commit-workflow","title":"GitHub Pre-commit Workflow","text":"<ul> <li>File: <code>github/workflows/pre-commit.yaml</code></li> <li>Description: Defines the structure for a GitHub Actions workflow to run pre-commit hooks.</li> <li>Structure name: <code>github/workflows/pre-commit</code></li> </ul>"},{"location":"structures/#github-release-drafter-workflow","title":"GitHub Release Drafter Workflow","text":"<ul> <li>File: <code>github/workflows/release-drafter.yaml</code></li> <li>Description: Contains the structure for a GitHub Actions workflow to draft releases.</li> <li>Structure name: <code>github/workflows/release-drafter</code></li> </ul>"},{"location":"structures/#github-run-struct-workflow","title":"GitHub Run Struct Workflow","text":"<ul> <li>File: <code>github/workflows/run-struct.yaml</code></li> <li>Description: Defines the structure for a GitHub Actions workflow to run Struct.</li> <li>Structure name: <code>github/workflows/run-struct</code></li> </ul>"},{"location":"structures/#github-templates","title":"GitHub Templates","text":"<ul> <li>File: <code>github/templates.yaml</code></li> <li>Description: Contains the structure for GitHub templates including <code>ISSUE_TEMPLATE/bug_report.yaml</code>, <code>ISSUE_TEMPLATE/feature_request.yaml</code>, and <code>PULL_REQUEST_TEMPLATE.md</code>.</li> <li>Structure name: <code>github/templates</code></li> </ul>"},{"location":"structures/#helm-chart","title":"Helm Chart","text":"<ul> <li>File: <code>helm-chart.yaml</code></li> <li>Description: Contains the structure for a Helm chart including <code>Chart.yaml</code>, <code>values.yaml</code>, and various templates.</li> <li>Structure name: <code>helm-chart</code></li> </ul>"},{"location":"structures/#github-instructions","title":"Github Instructions","text":"<ul> <li>File: <code>github/instructions/generic.yaml</code></li> <li>Description: Defines the structure for generic GitHub instructions. <code>generic.instruction.md</code></li> <li>Structure name: <code>github/instructions/generic</code></li> </ul>"},{"location":"structures/#github-generic-prompt","title":"Github generic prompt","text":"<ul> <li>File: <code>github/prompt/generic.yaml</code></li> <li>Description: Contains the structure for a generic GitHub prompt.</li> <li>Structure name: <code>github/prompt/generic</code></li> </ul>"},{"location":"structures/#github-react-form-prompt","title":"Github react form prompt","text":"<ul> <li>File: <code>github/prompt/react-form.yaml</code></li> <li>Description: Defines the structure for a React form prompt in GitHub.</li> <li>Structure name: <code>github/prompt/react-form</code></li> </ul>"},{"location":"structures/#github-security-api-prompt","title":"Github security api prompt","text":"<ul> <li>File: <code>github/prompt/security-api.yaml</code></li> <li>Description: Contains the structure for a GitHub security API prompt.</li> <li>Structure name: <code>github/prompt/security-api</code></li> </ul>"},{"location":"structures/#github-struct-prompt","title":"Github struct prompt","text":"<ul> <li>File: <code>github/prompt/struct.yaml</code></li> <li>Description: Defines the structure for a Struct prompt in GitHub.</li> <li>Structure name: <code>github/prompt/struct</code></li> </ul>"},{"location":"structures/#kubernetes-manifests","title":"Kubernetes Manifests","text":"<ul> <li>File: <code>kubernetes-manifests.yaml</code></li> <li>Description: Defines the structure for Kubernetes manifests including <code>deployment.yaml</code>, <code>service.yaml</code>, <code>ingress.yaml</code>, <code>configmap.yaml</code>, <code>secrets.yaml</code>, and <code>README.md</code>.</li> <li>Structure name: <code>kubernetes-manifests</code></li> </ul>"},{"location":"structures/#generic-project","title":"Generic Project","text":"<ul> <li>File: <code>project/generic.yaml</code></li> <li>Description: Contains the structure for a generic project with various configuration files and folders.</li> <li>Structure name: <code>project/generic</code></li> </ul>"},{"location":"structures/#go-project","title":"Go Project","text":"<ul> <li>File: <code>project/go.yaml</code></li> <li>Description: Defines the structure for a Go project including <code>.editorconfig</code>, <code>.env</code>, <code>.gitignore</code>, <code>LICENSE</code>, <code>README.md</code>, <code>main.go</code>, and various folders.</li> <li>Structure name: <code>project/go</code></li> </ul>"},{"location":"structures/#java-project","title":"Java Project","text":"<ul> <li>File: <code>project/java.yaml</code></li> <li>Description: Contains the structure for a Java project including <code>.editorconfig</code>, <code>.env</code>, <code>.gitignore</code>, <code>LICENSE</code>, <code>README.md</code>, <code>pom.xml</code>, and various folders.</li> <li>Structure name: <code>project/java</code></li> </ul>"},{"location":"structures/#nodejs-project","title":"Node.js Project","text":"<ul> <li>File: <code>project/nodejs.yaml</code></li> <li>Description: Defines the structure for a Node.js project.</li> <li>Structure name: <code>project/nodejs</code></li> </ul>"},{"location":"structures/#python-project","title":"Python Project","text":"<ul> <li>File: <code>project/python.yaml</code></li> <li>Description: Contains the structure for a Python project.</li> <li>Structure name: <code>project/python</code></li> </ul>"},{"location":"structures/#ruby-project","title":"Ruby Project","text":"<ul> <li>File: <code>project/ruby.yaml</code></li> <li>Description: Defines the structure for a Ruby project.</li> <li>Structure name: <code>project/ruby</code></li> </ul>"},{"location":"structures/#rust-project","title":"Rust Project","text":"<ul> <li>File: <code>project/rust.yaml</code></li> <li>Description: Contains the structure for a Rust project.</li> <li>Structure name: <code>project/rust</code></li> </ul>"},{"location":"structures/#aws-accounts-terraform","title":"AWS Accounts Terraform","text":"<ul> <li>File: <code>terraform/apps/aws-accounts.yaml</code></li> <li>Description: Defines the structure for AWS accounts Terraform configuration.</li> <li>Structure name: <code>terraform/apps/aws-accounts</code></li> </ul>"},{"location":"structures/#environments-terraform","title":"Environments Terraform","text":"<ul> <li>File: <code>terraform/apps/environments.yaml</code></li> <li>Description: Contains the structure for environments Terraform configuration.</li> <li>Structure name: <code>terraform/apps/environments</code></li> </ul>"},{"location":"structures/#generic-terraform","title":"Generic Terraform","text":"<ul> <li>File: <code>terraform/apps/generic.yaml</code></li> <li>Description: Defines the structure for generic Terraform configuration.</li> <li>Structure name: <code>terraform/apps/generic</code></li> </ul>"},{"location":"structures/#github-organization-terraform","title":"GitHub Organization Terraform","text":"<ul> <li>File: <code>terraform/apps/github-organization.yaml</code></li> <li>Description: Contains the structure for GitHub organization Terraform configuration.</li> <li>Structure name: <code>terraform/apps/github-organization</code></li> </ul>"},{"location":"structures/#init-terraform","title":"Init Terraform","text":"<ul> <li>File: <code>terraform/apps/init.yaml</code></li> <li>Description: Defines the structure for init Terraform configuration.</li> <li>Structure name: <code>terraform/apps/init</code></li> </ul>"},{"location":"structures/#generic-terraform-module","title":"Generic Terraform Module","text":"<ul> <li>File: <code>terraform/modules/generic.yaml</code></li> <li>Description: Contains the structure for a generic Terraform module.</li> <li>Structure name: <code>terraform/modules/generic</code></li> </ul>"},{"location":"structures/#vagrant-files","title":"Vagrant Files","text":"<ul> <li>File: <code>vagrant-files.yaml</code></li> <li>Description: Defines the structure for Vagrant files.</li> <li>Structure name: <code>vagrant-files</code></li> </ul>"},{"location":"template-variables/","title":"Template Variables","text":"<p>Template variables allow you to create dynamic content in your STRUCT configurations. This page covers all aspects of working with variables.</p>"},{"location":"template-variables/#basic-syntax","title":"Basic Syntax","text":"<p>Use template variables by enclosing them in <code>{{@</code> and <code>@}}</code>:</p> <pre><code>files:\n  - README.md:\n      content: |\n        # {{@ project_name @}}\n        Welcome to {{@ project_name @}}!\n</code></pre>"},{"location":"template-variables/#block-syntax","title":"Block Syntax","text":"<p>For control structures, use block notation:</p> <ul> <li>Start block: <code>{%@</code></li> <li>End block: <code>%@}</code></li> </ul> <pre><code>files:\n  - config.yaml:\n      content: |\n        {%@ if environment == \"production\" @%}\n        debug: false\n        {%@ else @%}\n        debug: true\n        {%@ endif @%}\n</code></pre>"},{"location":"template-variables/#comments","title":"Comments","text":"<p>Use comment notation to document your templates:</p> <ul> <li>Start comment: <code>{#@</code></li> <li>End comment: <code>@#}</code></li> </ul> <pre><code>files:\n  - app.py:\n      content: |\n        {#@ This is a template comment @#}\n        app_name = \"{{@ project_name @}}\"\n</code></pre>"},{"location":"template-variables/#default-variables","title":"Default Variables","text":"<p>STRUCT provides these built-in variables:</p> <ul> <li><code>file_name</code>: The name of the file being processed</li> <li><code>file_directory</code>: The directory containing the file being processed</li> </ul>"},{"location":"template-variables/#interactive-variables","title":"Interactive Variables","text":"<p>Define variables that prompt users for input:</p> <pre><code>variables:\n  - project_name:\n      description: \"The name of your project\"\n      type: string\n      default: \"MyProject\"\n  - author_name:\n      description: \"Your name\"\n      type: string\n      # No default = interactive prompt\n  - port:\n      description: \"Application port\"\n      type: integer\n      default: 8080\n</code></pre>"},{"location":"template-variables/#variable-types","title":"Variable Types","text":"<ul> <li><code>string</code>: Text values</li> <li><code>integer</code>: Numeric values</li> <li><code>boolean</code>: True/false values</li> </ul>"},{"location":"template-variables/#custom-jinja2-filters","title":"Custom Jinja2 Filters","text":"<p>STRUCT includes custom filters for common tasks:</p>"},{"location":"template-variables/#latest_release","title":"<code>latest_release</code>","text":"<p>Fetch the latest release version from GitHub:</p> <pre><code>files:\n  - Dockerfile:\n      content: |\n        FROM node:{{@ \"nodejs/node\" | latest_release @}}\n</code></pre> <p>Requirements: Set <code>GITHUB_TOKEN</code> environment variable for private repos.</p>"},{"location":"template-variables/#slugify","title":"<code>slugify</code>","text":"<p>Convert strings to URL-friendly slugs:</p> <pre><code>files:\n  - \"{{@ project_name | slugify @}}.conf\":\n      content: |\n        server_name {{@ project_name | slugify @}};\n</code></pre> <p>Options: Optional separator character (default: <code>-</code>)</p>"},{"location":"template-variables/#default_branch","title":"<code>default_branch</code>","text":"<p>Get the default branch name of a GitHub repository:</p> <pre><code>files:\n  - .github/workflows/ci.yml:\n      content: |\n        on:\n          push:\n            branches: [ {{@ \"httpdss/struct\" | default_branch @}} ]\n</code></pre>"},{"location":"template-variables/#the-with-clause","title":"The <code>with</code> Clause","text":"<p>Pass additional variables to nested structures:</p> <pre><code>folders:\n  - frontend/:\n      struct: project/react\n      with:\n        app_name: \"{{@ project_name @}}-frontend\"\n        port: 3000\n  - backend/:\n      struct: project/node\n      with:\n        app_name: \"{{@ project_name @}}-backend\"\n        port: 8000\n</code></pre> <p>Variables defined in <code>with</code> are merged with global variables and take precedence.</p>"},{"location":"template-variables/#advanced-examples","title":"Advanced Examples","text":""},{"location":"template-variables/#conditional-file-creation","title":"Conditional File Creation","text":"<pre><code>files:\n  - docker-compose.yml:\n      skip: \"{{@ not use_docker @}}\"\n      content: |\n        version: '3.8'\n        services:\n          app:\n            image: {{@ project_name | slugify @}}:latest\n</code></pre>"},{"location":"template-variables/#dynamic-file-names","title":"Dynamic File Names","text":"<pre><code>files:\n  - \"src/{{@ module_name @}}/index.js\":\n      content: |\n        // {{@ module_name @}} module\n        export default {};\n</code></pre>"},{"location":"template-variables/#environment-specific-content","title":"Environment-Specific Content","text":"<pre><code>files:\n  - config/{{@ environment @}}.yml:\n      content: |\n        {%@ if environment == \"production\" @%}\n        database_url: {{@ production_db_url @}}\n        {%@ else @%}\n        database_url: sqlite:///dev.db\n        {%@ endif @%}\n</code></pre>"},{"location":"usage/","title":"Basic Usage","text":"<p>Run the script with the following command using one of the following subcommands:</p> <ul> <li><code>generate</code>: Generate the project structure based on the YAML configuration.</li> <li><code>generate-schema</code>: Generate JSON schema for available structure templates.</li> <li><code>validate</code>: Validate the YAML configuration file.</li> <li><code>info</code>: Display information about the script and its dependencies.</li> <li><code>list</code>: List the available structs</li> </ul> <p>For more information, run the script with the <code>-h</code> or <code>--help</code> option (this is also available for each subcommand):</p> <p></p> <pre><code>struct -h\n</code></pre>"},{"location":"usage/#generate-command","title":"Generate Command","text":""},{"location":"usage/#finding-available-structures","title":"Finding Available Structures","text":"<p>Use the <code>list</code> command to see all available structures:</p> <pre><code>struct list\n</code></pre> <p>Or if you have auto-completion enabled, use <code>Tab</code> to see all options:</p> <pre><code>struct generate &lt;Tab&gt;\n# Shows all available structures\n</code></pre>"},{"location":"usage/#simple-example","title":"Simple Example","text":"<pre><code>struct generate terraform/modules/generic ./my-terraform-module\n</code></pre>"},{"location":"usage/#yaml-file-usage","title":"YAML File Usage","text":"<p>For local YAML configuration files, the <code>file://</code> protocol is automatically added:</p> <pre><code># Both of these work identically\nstruct generate my-config.yaml ./output\nstruct generate file://my-config.yaml ./output\n</code></pre>"},{"location":"usage/#complete-example","title":"Complete Example","text":"<pre><code>struct generate \\\n  --log=DEBUG \\\n  --dry-run \\\n  --backup=/path/to/backup \\\n  --file-strategy=rename \\\n  --log-file=/path/to/logfile.log \\\n  terraform-module \\\n  ./my-terraform-module\n</code></pre>"},{"location":"usage/#command-options","title":"Command Options","text":"<ul> <li><code>--log</code>: Set logging level (DEBUG, INFO, WARNING, ERROR)</li> <li><code>--dry-run</code>: Preview actions without making changes</li> <li><code>--backup</code>: Specify backup directory for existing files</li> <li><code>--file-strategy</code>: Choose how to handle existing files (overwrite, skip, append, rename, backup)</li> <li><code>--log-file</code>: Write logs to specified file</li> <li><code>--mappings-file</code>: Provide external mappings file (can be used multiple times)</li> </ul>"},{"location":"usage/#generate-schema-command","title":"Generate Schema Command","text":"<p>The <code>generate-schema</code> command creates JSON schema definitions for available structure templates, making it easier for tools and IDEs to provide autocompletion and validation.</p>"},{"location":"usage/#basic-usage-of-generate-schema","title":"Basic Usage of <code>generate-schema</code>","text":"<pre><code># Generate schema to stdout\nstruct generate-schema\n\n# Generate schema with custom structures path\nstruct generate-schema -s /path/to/custom/structures\n\n# Save schema to file\nstruct generate-schema -o schema.json\n\n# Combine custom path and output file\nstruct generate-schema -s /path/to/custom/structures -o schema.json\n</code></pre>"},{"location":"usage/#command-options-for-generate-schema","title":"Command Options for <code>generate-schema</code>","text":"<ul> <li><code>-s, --structures-path</code>: Path to additional structure definitions (optional)</li> <li><code>-o, --output</code>: Output file path for the schema (default: stdout)</li> </ul> <p>The generated schema includes all available structures from both the built-in contribs directory and any custom structures path you specify. This is useful for:</p> <ul> <li>IDE autocompletion when writing <code>.struct.yaml</code> files</li> <li>Validation of structure references in your configurations</li> <li>Programmatic discovery of available templates</li> </ul>"},{"location":"usage/#other-commands","title":"Other Commands","text":""},{"location":"usage/#validate-configuration","title":"Validate Configuration","text":"<pre><code>struct validate my-structure.yaml\n</code></pre>"},{"location":"usage/#list-available-structures","title":"List Available Structures","text":"<pre><code>struct list\n</code></pre>"},{"location":"usage/#show-information","title":"Show Information","text":"<pre><code>struct info &lt;structure_definition&gt;\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>This page contains practical examples of STRUCT configurations for various use cases.</p>"},{"location":"examples/#basic-examples","title":"Basic Examples","text":""},{"location":"examples/#simple-project","title":"Simple Project","text":"<p>Basic project structure with files and folders:</p> <pre><code># Example: Simple Project Structure\n# Use case: Basic project setup with common files\n\nfiles:\n  - README.md:\n      content: |\n        # {{@ project_name | default('My Project') @}}\n\n        Welcome to the project!\n\n        ## Getting Started\n\n        1. Install dependencies\n        2. Run the application\n        3. Enjoy!\n\n  - .gitignore:\n      content: |\n        node_modules/\n        *.log\n        .env\n        dist/\n\n  - LICENSE:\n      content: |\n        MIT License\n\n        Copyright (c) {{@ year | default('2024') @}} {{@ author | default('Project Author') @}}\n\nfolders:\n  - src/:\n      struct:\n        - basic/folder\n  - docs/:\n      struct:\n        - basic/folder\n\nvariables:\n  - project_name:\n      description: 'Name of the project'\n      type: string\n      default: 'My Project'\n  - author:\n      description: 'Project author'\n      type: string\n      default: 'Project Author'\n  - year:\n      description: 'Copyright year'\n      type: string\n      default: '2024'\n</code></pre>"},{"location":"examples/#template-variables","title":"Template Variables","text":"<p>Using dynamic content with variables:</p> <pre><code># Example: Template Variables\n# Use case: Dynamic content generation with user input\n\nfiles:\n  - package.json:\n      content: |\n        {\n          \"name\": \"{{@ package_name @}}\",\n          \"version\": \"{{@ version | default('1.0.0') @}}\",\n          \"description\": \"{{@ description @}}\",\n          \"author\": \"{{@ author @}}\",\n          \"license\": \"{{@ license | default('MIT') @}}\"\n        }\n\n  - src/config.js:\n      content: |\n        module.exports = {\n          appName: '{{@ app_name @}}',\n          version: '{{@ version | default('1.0.0') @}}',\n          environment: '{{@ environment | default('development') @}}'\n        };\n\nvariables:\n  - package_name:\n      description: 'NPM package name'\n      type: string\n      required: true\n  - app_name:\n      description: 'Application display name'\n      type: string\n      required: true\n  - description:\n      description: 'Project description'\n      type: string\n      required: true\n  - author:\n      description: 'Package author'\n      type: string\n      required: true\n  - version:\n      description: 'Initial version'\n      type: string\n      default: '1.0.0'\n  - license:\n      description: 'License type'\n      type: string\n      default: 'MIT'\n  - environment:\n      description: 'Target environment'\n      type: string\n      default: 'development'\n</code></pre>"},{"location":"examples/#remote-files","title":"Remote Files","text":"<p>Fetching content from external sources:</p> <pre><code># Example: Remote Files\n# Use case: Including content from external URLs or repositories\n\nfiles:\n  - .gitignore:\n      remote: 'https://raw.githubusercontent.com/github/gitignore/main/Node.gitignore'\n\n  - CODE_OF_CONDUCT.md:\n      remote: 'https://raw.githubusercontent.com/contributor-covenant/contributor-covenant/main/CODE_OF_CONDUCT.md'\n\n  - CONTRIBUTING.md:\n      content: |\n        # Contributing to {{@ project_name @}}\n\n        Thank you for your interest in contributing!\n\n        ## Development Setup\n\n        1. Fork the repository\n        2. Clone your fork\n        3. Install dependencies\n        4. Make your changes\n        5. Submit a pull request\n\nvariables:\n  - project_name:\n      description: 'Project name'\n      type: string\n      required: true\n</code></pre>"},{"location":"examples/#application-development","title":"Application Development","text":""},{"location":"examples/#python-project","title":"Python Project","text":"<p>Complete Python application structure:</p> <pre><code># Example: Python Project\n# Use case: Full Python application with proper structure\n\nfiles:\n  - README.md:\n      content: |\n        # {{@ project_name @}}\n\n        {{@ description @}}\n\n        ## Installation\n\n        ```bash\n        pip install -r requirements.txt\n        ```\n\n        ## Usage\n\n        ```bash\n        python -m {{@ package_name @}}\n        ```\n\n  - requirements.txt:\n      content: |\n        click&gt;=8.0.0\n        requests&gt;=2.25.0\n        pytest&gt;=6.0.0\n\n  - setup.py:\n      content: |\n        from setuptools import setup, find_packages\n\n        setup(\n            name=\"{{@ package_name @}}\",\n            version=\"{{@ version | default('0.1.0') @}}\",\n            description=\"{{@ description @}}\",\n            author=\"{{@ author @}}\",\n            packages=find_packages(),\n            install_requires=[\n                \"click&gt;=8.0.0\",\n                \"requests&gt;=2.25.0\",\n            ],\n            entry_points={\n                \"console_scripts\": [\n                    \"{{@ package_name @}}={{@ package_name @}}.cli:main\",\n                ],\n            },\n        )\n\n  - '{{@ package_name @}}/__init__.py':\n      content: |\n        \"\"\"{{@ description @}}\"\"\"\n        __version__ = \"{{@ version | default('0.1.0') @}}\"\n\n  - '{{@ package_name @}}/main.py':\n      content: |\n        \"\"\"Main application module.\"\"\"\n\n        def main():\n            \"\"\"Main entry point.\"\"\"\n            print(\"Hello from {{@ project_name @}}!\")\n\n        if __name__ == \"__main__\":\n            main()\n\n  - tests/test_main.py:\n      content: |\n        \"\"\"Tests for main module.\"\"\"\n        import pytest\n        from {{@ package_name @}} import main\n\n        def test_main():\n            \"\"\"Test main function.\"\"\"\n            # Add your tests here\n            assert True\n\nvariables:\n  - project_name:\n      description: 'Project name'\n      type: string\n      required: true\n  - package_name:\n      description: 'Python package name'\n      type: string\n      required: true\n  - description:\n      description: 'Project description'\n      type: string\n      required: true\n  - author:\n      description: 'Project author'\n      type: string\n      required: true\n  - version:\n      description: 'Initial version'\n      type: string\n      default: '0.1.0'\n</code></pre>"},{"location":"examples/#nodejs-api","title":"Node.js API","text":"<p>REST API with Express.js:</p> <pre><code># Example: Node.js API\n# Use case: Express.js REST API with proper structure\n\nfiles:\n  - package.json:\n      content: |\n        {\n          \"name\": \"{{@ package_name @}}\",\n          \"version\": \"{{@ version | default('1.0.0') @}}\",\n          \"description\": \"{{@ description @}}\",\n          \"main\": \"src/app.js\",\n          \"scripts\": {\n            \"start\": \"node src/app.js\",\n            \"dev\": \"nodemon src/app.js\",\n            \"test\": \"jest\"\n          },\n          \"dependencies\": {\n            \"express\": \"^4.18.0\",\n            \"cors\": \"^2.8.5\",\n            \"helmet\": \"^6.0.0\",\n            \"dotenv\": \"^16.0.0\"\n          },\n          \"devDependencies\": {\n            \"nodemon\": \"^2.0.20\",\n            \"jest\": \"^29.0.0\",\n            \"supertest\": \"^6.3.0\"\n          }\n        }\n\n  - src/app.js:\n      content: |\n        const express = require('express');\n        const cors = require('cors');\n        const helmet = require('helmet');\n        require('dotenv').config();\n\n        const app = express();\n        const PORT = process.env.PORT || 3000;\n\n        // Middleware\n        app.use(helmet());\n        app.use(cors());\n        app.use(express.json());\n\n        // Routes\n        app.get('/', (req, res) =&gt; {\n          res.json({ message: 'Welcome to {{@ project_name @}} API' });\n        });\n\n        app.get('/api/health', (req, res) =&gt; {\n          res.json({ status: 'OK', timestamp: new Date().toISOString() });\n        });\n\n        app.listen(PORT, () =&gt; {\n          console.log(`{{@ project_name @}} API running on port ${PORT}`);\n        });\n\n        module.exports = app;\n\n  - .env.example:\n      content: |\n        PORT=3000\n        NODE_ENV=development\n\nvariables:\n  - project_name:\n      description: 'Project name'\n      type: string\n      required: true\n  - package_name:\n      description: 'NPM package name'\n      type: string\n      required: true\n  - description:\n      description: 'API description'\n      type: string\n      required: true\n  - version:\n      description: 'Initial version'\n      type: string\n      default: '1.0.0'\n</code></pre>"},{"location":"examples/#usage","title":"Usage","text":"<p>To use these examples:</p> <ol> <li>Copy the YAML content from any example above</li> <li>Save it to a file (e.g., <code>my-structure.yaml</code>)</li> <li>Run struct generate with your file:</li> </ol> <pre><code># Create your structure file\ncat &gt; my-structure.yaml &lt;&lt; 'EOF'\n# Paste the YAML content here\nEOF\n\n# Generate your project\nstruct generate file://my-structure.yaml ./my-project\n</code></pre>"},{"location":"examples/#quick-start-with-template-variables","title":"Quick Start with Template Variables","text":"<pre><code># Generate with custom variables\nstruct generate -v \"project_name=MyApp,author=John Doe\" file://my-structure.yaml ./my-project\n</code></pre>"},{"location":"examples/#contributing-examples","title":"Contributing Examples","text":"<p>We welcome community examples! To contribute:</p> <ol> <li>Create a new <code>.yaml</code> file in this directory</li> <li>Follow the naming convention: <code>descriptive-name.yaml</code></li> <li>Include comments explaining key concepts</li> <li>Add the example to this index</li> <li>Submit a pull request</li> </ol>"},{"location":"examples/#example-template","title":"Example Template","text":"<pre><code># Example: [Brief Description]\n# Use case: [What this example demonstrates]\n# Requirements: [Any prerequisites or dependencies]\n\nfiles:\n  - README.md:\n      content: |\n        # Example Project\n        This demonstrates [key concept]\n\nvariables:\n  - example_var:\n      description: 'Example variable'\n      type: string\n      default: 'example_value'\n</code></pre>"},{"location":"vhs/","title":"STRUCT VHS Demo Tapes","text":"<p>This directory contains VHS tape files for creating animated GIF demonstrations of STRUCT's features. These tapes showcase various use cases and capabilities of the STRUCT tool.</p>"},{"location":"vhs/#available-tapes","title":"\ud83c\udfac Available Tapes","text":""},{"location":"vhs/#1-installation-setup","title":"1. Installation &amp; Setup","text":"<p>File: <code>install.tape</code> Duration: ~30 seconds Description: Shows how to install STRUCT using pip and verify the installation.</p>"},{"location":"vhs/#2-basic-usage","title":"2. Basic Usage","text":"<p>File: <code>basic-usage.tape</code> Description: Demonstrates basic STRUCT commands like <code>list</code>, <code>info</code>, and simple project generation.</p> <pre><code>Output docs/vhs/basic-usage.gif\n\nSet Theme \"Monokai Vivid\"\nSet FontSize 14\nSet TypingSpeed 40ms\nSet WindowBar Colorful\nSet BorderRadius 8\nSet Margin 0\nSet Padding 10\nSet Width 1400\nSet Height 800\nSet Shell \"bash\"\n\nType \"# Explore available structures\" Enter\nType \"struct list\" Enter\nSleep 3\nType \"\" Enter\nType \"# Get information about a specific structure\" Enter\nType \"struct info terraform/module\" Enter\nSleep 5\nType \"\" Enter\nType \"# Generate a simple project structure\" Enter\nType \"struct generate terraform/module ./my-terraform-module\" Enter\nSleep 8\nType \"\" Enter\nType \"# Verify the generated structure\" Enter\nType \"tree my-terraform-module\" Enter\nSleep 5\n</code></pre>"},{"location":"vhs/#3-yaml-configuration","title":"3. YAML Configuration","text":"<p>File: <code>yaml-config.tape</code> Description: Shows how to create and use custom YAML configuration files.</p> <pre><code>Output docs/vhs/yaml-config.gif\n\nSet Theme \"Monokai Vivid\"\nSet FontSize 14\nSet TypingSpeed 40ms\nSet WindowBar Colorful\nSet BorderRadius 8\nSet Margin 0\nSet Padding 10\nSet Width 1400\nSet Height 800\nSet Shell \"bash\"\n\nType \"# Create a custom YAML configuration\" Enter\nType \"cat &gt; my-project.yaml &lt;&lt; 'EOF'\" Enter\nType \"files:\" Enter\nType \"  - README.md:\" Enter\nType \"      content: |\" Enter\nType \"        # {{@ project_name @}}\" Enter\nType \"        Welcome to my awesome project!\" Enter\nType \"  - src/main.py:\" Enter\nType \"      content: |\" Enter\nType \"        print('Hello from {{@ project_name @}}!')\" Enter\nType \"\" Enter\nType \"variables:\" Enter\nType \"  - project_name:\" Enter\nType \"      description: 'Name of your project'\" Enter\nType \"      type: string\" Enter\nType \"      default: 'MyProject'\" Enter\nType \"EOF\" Enter\nSleep 2\nType \"\" Enter\nType \"# Generate structure from YAML (note: file:// is automatic)\" Enter\nType \"struct generate my-project.yaml ./output\" Enter\nSleep 5\nType \"\" Enter\nType \"# Check the generated files\" Enter\nType \"tree output &amp;&amp; echo &amp;&amp; cat output/README.md\" Enter\nSleep 5\n</code></pre>"},{"location":"vhs/#4-mappings-variables","title":"4. Mappings &amp; Variables","text":"<p>File: <code>mappings-demo.tape</code> Description: Demonstrates external mappings files and template variables.</p> <pre><code>Output docs/vhs/mappings-demo.gif\n\nSet Theme \"Monokai Vivid\"\nSet FontSize 14\nSet TypingSpeed 40ms\nSet WindowBar Colorful\nSet BorderRadius 8\nSet Margin 0\nSet Padding 10\nSet Width 1400\nSet Height 800\nSet Shell \"bash\"\n\nType \"# Create mappings file for environment variables\" Enter\nType \"cat &gt; mappings.yaml &lt;&lt; 'EOF'\" Enter\nType \"mappings:\" Enter\nType \"  environments:\" Enter\nType \"    dev:\" Enter\nType \"      database_url: 'postgres://localhost:5432/myapp_dev'\" Enter\nType \"      debug: true\" Enter\nType \"    prod:\" Enter\nType \"      database_url: 'postgres://prod-server:5432/myapp'\" Enter\nType \"      debug: false\" Enter\nType \"  teams:\" Enter\nType \"    devops: 'devops-team@company.com'\" Enter\nType \"    frontend: 'frontend-team@company.com'\" Enter\nType \"EOF\" Enter\nSleep 2\nType \"\" Enter\nType \"# Create structure that uses mappings\" Enter\nType \"cat &gt; app-config.yaml &lt;&lt; 'EOF'\" Enter\nType \"files:\" Enter\nType \"  - config/{{@ env @}}.json:\" Enter\nType \"      content: |\" Enter\nType \"        {\" Enter\nType \"          \\\"database_url\\\": \\\"{{@ mappings.environments[env].database_url @}}\\\",\" Enter\nType \"          \\\"debug\\\": {{@ mappings.environments[env].debug @}},\" Enter\nType \"          \\\"contact\\\": \\\"{{@ mappings.teams.devops @}}\\\"\" Enter\nType \"        }\" Enter\nType \"variables:\" Enter\nType \"  - env:\" Enter\nType \"      description: 'Environment (dev/prod)'\" Enter\nType \"      type: string\" Enter\nType \"      default: 'dev'\" Enter\nType \"EOF\" Enter\nSleep 3\nType \"\" Enter\nType \"# Generate with mappings file\" Enter\nType \"struct generate --mappings-file mappings.yaml app-config.yaml ./config-output\" Enter\nSleep 5\nType \"\" Enter\nType \"# Check generated configuration\" Enter\nType \"cat config-output/config/dev.json\" Enter\nSleep 3\n</code></pre>"},{"location":"vhs/#5-multiple-mappings-files","title":"5. Multiple Mappings Files","text":"<p>File: <code>multiple-mappings.tape</code> Description: Shows the new multiple mappings file feature with deep merging.</p> <pre><code>Output docs/vhs/multiple-mappings.gif\n\nSet Theme \"Monokai Vivid\"\nSet FontSize 14\nSet TypingSpeed 40ms\nSet WindowBar Colorful\nSet BorderRadius 8\nSet Margin 0\nSet Padding 10\nSet Width 1400\nSet Height 800\nSet Shell \"bash\"\n\nType \"# Create base mappings file\" Enter\nType \"cat &gt; base-mappings.yaml &lt;&lt; 'EOF'\" Enter\nType \"mappings:\" Enter\nType \"  common:\" Enter\nType \"    app_name: 'MyApp'\" Enter\nType \"    version: '1.0.0'\" Enter\nType \"  environments:\" Enter\nType \"    dev:\" Enter\nType \"      replicas: 1\" Enter\nType \"EOF\" Enter\nSleep 2\nType \"\" Enter\nType \"# Create environment-specific overrides\" Enter\nType \"cat &gt; prod-mappings.yaml &lt;&lt; 'EOF'\" Enter\nType \"mappings:\" Enter\nType \"  environments:\" Enter\nType \"    dev:\" Enter\nType \"      debug: true\" Enter\nType \"    prod:\" Enter\nType \"      replicas: 3\" Enter\nType \"      debug: false\" Enter\nType \"EOF\" Enter\nSleep 2\nType \"\" Enter\nType \"# Create deployment template\" Enter\nType \"cat &gt; deployment.yaml &lt;&lt; 'EOF'\" Enter\nType \"files:\" Enter\nType \"  - k8s/deployment.yaml:\" Enter\nType \"      content: |\" Enter\nType \"        apiVersion: apps/v1\" Enter\nType \"        kind: Deployment\" Enter\nType \"        metadata:\" Enter\nType \"          name: {{@ mappings.common.app_name @}}\" Enter\nType \"        spec:\" Enter\nType \"          replicas: {{@ mappings.environments[env].replicas @}}\" Enter\nType \"variables:\" Enter\nType \"  - env:\" Enter\nType \"      description: 'Target environment'\" Enter\nType \"      default: 'dev'\" Enter\nType \"EOF\" Enter\nSleep 3\nType \"\" Enter\nType \"# Generate with multiple mappings files (deep merge)\" Enter\nType \"struct generate \\\\\" Enter\nType \"  --mappings-file base-mappings.yaml \\\\\" Enter\nType \"  --mappings-file prod-mappings.yaml \\\\\" Enter\nType \"  deployment.yaml ./k8s-output\" Enter\nSleep 5\nType \"\" Enter\nType \"# Check the merged result\" Enter\nType \"cat k8s-output/k8s/deployment.yaml\" Enter\nSleep 3\n</code></pre>"},{"location":"vhs/#6-advanced-features","title":"6. Advanced Features","text":"<p>File: <code>advanced-features.tape</code> Description: Demonstrates dry-run, file strategies, and validation.</p> <pre><code>Output docs/vhs/advanced-features.gif\n\nSet Theme \"Monokai Vivid\"\nSet FontSize 14\nSet TypingSpeed 40ms\nSet WindowBar Colorful\nSet BorderRadius 8\nSet Margin 0\nSet Padding 10\nSet Width 1400\nSet Height 800\nSet Shell \"bash\"\n\nType \"# Create a test structure\" Enter\nType \"mkdir -p existing-project &amp;&amp; echo 'old content' &gt; existing-project/README.md\" Enter\nSleep 1\nType \"\" Enter\nType \"# Use dry-run to preview changes\" Enter\nType \"struct generate --dry-run terraform/module ./existing-project\" Enter\nSleep 5\nType \"\" Enter\nType \"# Validate a YAML configuration\" Enter\nType \"cat &gt; test-config.yaml &lt;&lt; 'EOF'\" Enter\nType \"files:\" Enter\nType \"  - test.txt:\" Enter\nType \"      content: 'Hello World'\" Enter\nType \"EOF\" Enter\nSleep 2\nType \"struct validate test-config.yaml\" Enter\nSleep 3\nType \"\" Enter\nType \"# Generate with backup strategy\" Enter\nType \"struct generate --file-strategy=backup --backup=./backups terraform/module ./existing-project\" Enter\nSleep 5\nType \"\" Enter\nType \"# Check backup was created\" Enter\nType \"ls -la backups/ &amp;&amp; echo &amp;&amp; echo 'New content:' &amp;&amp; head existing-project/README.md\" Enter\nSleep 3\n</code></pre>"},{"location":"vhs/#7-remote-content-protocols","title":"7. Remote Content &amp; Protocols","text":"<p>File: <code>remote-content.tape</code> Description: Shows fetching content from remote sources (GitHub, HTTP, etc.).</p> <pre><code>Output docs/vhs/remote-content.gif\n\nSet Theme \"Monokai Vivid\"\nSet FontSize 14\nSet TypingSpeed 40ms\nSet WindowBar Colorful\nSet BorderRadius 8\nSet Margin 0\nSet Padding 10\nSet Width 1400\nSet Height 800\nSet Shell \"bash\"\n\nType \"# Create structure using remote content\" Enter\nType \"cat &gt; remote-demo.yaml &lt;&lt; 'EOF'\" Enter\nType \"files:\" Enter\nType \"  - .gitignore:\" Enter\nType \"      file: github://github/gitignore/main/Python.gitignore\" Enter\nType \"  - LICENSE:\" Enter\nType \"      file: https://raw.githubusercontent.com/licenses/license-templates/master/templates/mit.txt\" Enter\nType \"  - README.md:\" Enter\nType \"      content: |\" Enter\nType \"        # {{@ project_name @}}\" Enter\nType \"        \" Enter\nType \"        This project uses remote content from GitHub.\" Enter\nType \"variables:\" Enter\nType \"  - project_name:\" Enter\nType \"      description: 'Project name'\" Enter\nType \"      default: 'RemoteDemo'\" Enter\nType \"EOF\" Enter\nSleep 3\nType \"\" Enter\nType \"# Generate project with remote content\" Enter\nType \"struct generate remote-demo.yaml ./remote-project\" Enter\nSleep 8\nType \"\" Enter\nType \"# Check downloaded content\" Enter\nType \"echo 'Generated files:' &amp;&amp; ls -la remote-project/\" Enter\nType \"echo &amp;&amp; echo 'First few lines of .gitignore:' &amp;&amp; head -10 remote-project/.gitignore\" Enter\nSleep 5\n</code></pre>"},{"location":"vhs/#8-schema-generation","title":"8. Schema Generation","text":"<p>File: <code>schema-generation.tape</code> Description: Demonstrates the generate-schema command for IDE integration.</p> <pre><code>Output docs/vhs/schema-generation.gif\n\nSet Theme \"Monokai Vivid\"\nSet FontSize 14\nSet TypingSpeed 40ms\nSet WindowBar Colorful\nSet BorderRadius 8\nSet Margin 0\nSet Padding 10\nSet Width 1400\nSet Height 800\nSet Shell \"bash\"\n\nType \"# Generate JSON schema for available structures\" Enter\nType \"struct generate-schema\" Enter\nSleep 5\nType \"\" Enter\nType \"# Save schema to file for IDE integration\" Enter\nType \"struct generate-schema -o struct-schema.json\" Enter\nSleep 3\nType \"\" Enter\nType \"# Check the generated schema\" Enter\nType \"echo 'Schema file created:' &amp;&amp; ls -la struct-schema.json\" Enter\nType \"echo &amp;&amp; echo 'Available structures in schema:' &amp;&amp; jq -r '.definitions.PluginList.enum[]' struct-schema.json | head -10\" Enter\nSleep 5\nType \"\" Enter\nType \"# Schema can be used in VS Code for autocompletion\" Enter\nType \"echo 'Add to your .struct.yaml files for IDE support:'\" Enter\nType \"echo '# yaml-language-server: \\$schema=./struct-schema.json'\" Enter\nSleep 3\n</code></pre>"},{"location":"vhs/#creating-the-gifs","title":"\ud83c\udfa5 Creating the GIFs","text":"<p>To generate all the GIF animations, run:</p> <pre><code># Install VHS if not already installed\ngo install github.com/charmbracelet/vhs@latest\n\n# Generate all tapes\ncd docs/vhs\nvhs install.tape\nvhs basic-usage.tape\nvhs yaml-config.tape\nvhs mappings-demo.tape\nvhs multiple-mappings.tape\nvhs advanced-features.tape\nvhs remote-content.tape\nvhs schema-generation.tape\n</code></pre>"},{"location":"vhs/#usage-in-documentation","title":"\ud83d\udcd6 Usage in Documentation","text":"<p>These GIFs can be embedded in:</p> <ul> <li>README.md - Show installation and basic usage</li> <li>docs/quickstart.md - Include basic-usage.gif</li> <li>docs/mappings.md - Include mappings-demo.gif and multiple-mappings.gif</li> <li>docs/configuration.md - Include yaml-config.gif</li> <li>docs/file-handling.md - Include advanced-features.gif</li> <li>docs/schema.md - Include schema-generation.gif</li> </ul> <p>Example markdown embedding:</p> <pre><code>![STRUCT Basic Usage](./docs/vhs/basic-usage.gif)\n</code></pre>"},{"location":"vhs/#vhs-configuration","title":"\u2699\ufe0f VHS Configuration","text":"<p>All tapes use consistent settings:</p> <ul> <li>Theme: Monokai Vivid</li> <li>Font Size: 14</li> <li>Typing Speed: 40ms</li> <li>Dimensions: 1400x800</li> <li>Shell: bash</li> </ul>"},{"location":"vhs/#updating-tapes","title":"\ud83d\udd04 Updating Tapes","text":"<p>When STRUCT features change:</p> <ol> <li>Update the relevant tape file</li> <li>Regenerate the GIF: <code>vhs filename.tape</code></li> <li>Commit both the tape and GIF files</li> <li>Update documentation references if needed</li> </ol> <p>These demonstrations provide comprehensive coverage of STRUCT's capabilities, from basic usage to advanced features like multiple mappings files, remote content fetching, and schema generation.</p>"}]}
