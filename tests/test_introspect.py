import os
import tempfile
import yaml
import shutil
import pytest
from struct_module.commands.introspect import IntrospectCommand
import argparse

def make_test_tree(base):
    os.makedirs(os.path.join(base, 'dir1', 'subdir'), exist_ok=True)
    os.makedirs(os.path.join(base, 'dir2'), exist_ok=True)
    with open(os.path.join(base, 'file1.txt'), 'w') as f:
        f.write('hello world')
    with open(os.path.join(base, 'dir1', 'file2.txt'), 'w') as f:
        f.write('foo {{bar}} baz')
    with open(os.path.join(base, 'dir1', 'subdir', 'bigfile.bin'), 'wb') as f:
        f.write(b'0' * (60 * 1024))  # 60KB

def test_introspect_basic(tmp_path):
    make_test_tree(tmp_path)
    parser = argparse.ArgumentParser()
    cmd = IntrospectCommand(parser)
    output_yaml = tmp_path / 'out.yaml'
    args = parser.parse_args(['--source', str(tmp_path), '--output', str(output_yaml)])
    cmd.execute(args)
    with open(output_yaml) as f:
        lines = f.readlines()
    assert lines[0].startswith('# Auto-generated by')
    doc = yaml.safe_load(''.join(lines[1:]))
    files = {list(f.keys())[0]: list(f.values())[0] for f in doc['files']}
    folders = {list(f.keys())[0]: list(f.values())[0] for f in doc['folders']}
    assert 'file1.txt' in files
    assert files['file1.txt']['type'] == 'file'
    assert 'content' in files['file1.txt']
    assert 'dir1/file2.txt' in files
    # Jinja variable is escaped
    assert '{\{bar}}' in files['dir1/file2.txt']['content']
    # Large file uses content_from
    assert 'content_from' in files['dir1/subdir/bigfile.bin']
    assert files['dir1/subdir/bigfile.bin']['content_from'].startswith('file://')
    # Folders
    assert 'dir1' in folders
    assert folders['dir1']['type'] == 'directory'
    assert 'dir1/subdir' in folders
    assert folders['dir1/subdir']['type'] == 'directory'
    assert 'dir2' in folders
    assert folders['dir2']['type'] == 'directory'

def test_introspect_ignore(tmp_path):
    make_test_tree(tmp_path)
    # Add a .git dir and a .DS_Store file
    os.makedirs(tmp_path / '.git')
    with open(tmp_path / '.DS_Store', 'w') as f:
        f.write('ignore me')
    # Write .structignore file
    with open(tmp_path / '.structignore', 'w') as f:
        f.write('.git\n.DS_Store\n')
    parser = argparse.ArgumentParser()
    cmd = IntrospectCommand(parser)
    output_yaml = tmp_path / 'out.yaml'
    args = parser.parse_args(['--source', str(tmp_path), '--output', str(output_yaml)])
    cmd.execute(args)
    with open(output_yaml) as f:
        doc = yaml.safe_load(''.join(f.readlines()[1:]))
    files = {list(f.keys())[0]: list(f.values())[0] for f in doc['files']}
    assert '.DS_Store' not in files
    folders = {list(f.keys())[0]: list(f.values())[0] for f in doc['folders']}
    assert '.git' not in folders
