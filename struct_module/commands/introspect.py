import os
import argparse
import yaml
import re
import fnmatch
from struct_module.commands import Command

JINJA_VAR_PATTERN = re.compile(r'{{')

class IntrospectCommand(Command):
    def __init__(self, parser):
        super().__init__(parser)
        parser.add_argument('--source', type=str, required=True, help='Source directory to introspect')
        parser.add_argument('--output', type=str, default='structure.yaml', help='Output YAML file')
        parser.set_defaults(func=self.execute)

    def _read_structignore(self, source):
        ignore_path = os.path.join(source, '.structignore')
        patterns = []
        if os.path.exists(ignore_path):
            with open(ignore_path, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        patterns.append(line)
        return patterns

    def _should_ignore(self, path, patterns):
        for pat in patterns:
            if fnmatch.fnmatch(path, pat) or fnmatch.fnmatch(os.path.basename(path), pat):
                return True
        return False

    def execute(self, args):
        source = os.path.abspath(args.source)
        output = args.output
        structure = []
        folders = []
        comment = f"# Auto-generated by `struct introspect` from source: {args.source}"
        ignore_patterns = self._read_structignore(source)
        for root, dirs, files in os.walk(source):
            rel_root = os.path.relpath(root, source)
            if rel_root == '.':
                rel_root = ''
            # Remove ignored dirs in-place
            dirs[:] = [d for d in dirs if not self._should_ignore(os.path.join(rel_root, d), ignore_patterns)]
            for d in dirs:
                folder_path = os.path.normpath(os.path.join(rel_root, d))
                folders.append({folder_path: {'type': 'directory'}})
            for f in files:
                if self._should_ignore(os.path.join(rel_root, f), ignore_patterns):
                    continue
                file_path = os.path.normpath(os.path.join(rel_root, f))
                abs_file_path = os.path.join(root, f)
                file_entry = {file_path: {'type': 'file'}}
                try:
                    size = os.path.getsize(abs_file_path)
                    if size < 50 * 1024:
                        with open(abs_file_path, 'r', encoding='utf-8', errors='replace') as file_obj:
                            content = file_obj.read()
                        # Escape Jinja variables
                        content = JINJA_VAR_PATTERN.sub('{\{', content)
                        file_entry[file_path]['content'] = content
                    else:
                        file_entry[file_path]['content_from'] = f"file://{file_path}"
                except Exception as e:
                    file_entry[file_path]['content'] = f"[Error reading file: {e}]"
                structure.append(file_entry)
        # Compose YAML
        yaml_dict = {'files': structure, 'folders': folders}
        with open(output, 'w', encoding='utf-8') as out:
            out.write(f"{comment}\n")
            yaml.dump(yaml_dict, out, allow_unicode=True, sort_keys=False, default_flow_style=False)
        self.logger.info(f"Introspection complete. YAML written to {output}")
