structure:
  - .editorconfig:
      content: |
        # Editor configuration
        root = true

        [*]
        indent_style = space
        indent_size = 2
        end_of_line = lf
        charset = utf-8
        trim_trailing_whitespace = true
        insert_final_newline = true
  - .env:
      content: |
        # Environment variables
  - .env.example:
      content: |
        # Environment variables
  - .gitignore:
      content: |
        # Ignore files generated by the app
        .env
        .venv
  - LICENSE:
      file: https://raw.githubusercontent.com/httpdss/struct/main/LICENSE
  - README.md:
      content: |
        # Generic App

        ## Introduction

        This is a generic app that can be used as a template for new projects.

        ## Contribute

        If you would like to contribute to this project, please follow the guidelines in the [CONTRIBUTING.md](.github/CONTRIBUTING.md) file.

        ## License

        This project is licensed under the terms of the [Apache 2.0](LICENSE) license.
  - Cargo.toml:
      content: |
        [package]
        name = "project_name"
        version = "0.1.0"
        edition = "2018"
        authors = [""]
        description = "A new Rust project"
  - src/main.rs:
      content: |
        fn main() {
            println!("Hello, world!");
        }
  - src/lib.rs:
      content: |
        pub fn add(a: i32, b: i32) -> i32 {
            a + b
        }
  - module1.rs:
      content: |
        pub fn add(a: i32, b: i32) -> i32 {
            a + b
        }
  - module2.rs:
      content: |
        pub fn sub(a: i32, b: i32) -> i32 {
            a - b
        }
  - tests/integration_tests.rs:
      content: |
        #[cfg(test)]
        mod tests {
            use super::*;

            #[test]
            fn test_add() {
                assert_eq!(add(1, 2), 3);
            }

            #[test]
            fn test_sub() {
                assert_eq!(sub(2, 1), 1);
            }
        }
  - benches/benchmark.rs:
      content: |
        #[cfg(test)]
        mod tests {
            use super::*;
            use test::Bencher;

            #[bench]
            fn bench_add(b: &mut Bencher) {
                b.iter(|| add(1, 2));
            }

            #[bench]
            fn bench_sub(b: &mut Bencher) {
                b.iter(|| sub(2, 1));
            }
        }
  - .cargo/config:
      content: |
        [build]
        target = "x86_64-unknown-linux-musl"
